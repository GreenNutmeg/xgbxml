# -*- coding: utf-8 -*-


import json
import importlib.resources as pkg_resources
import importlib
from lxml import etree

from . import schema_dicts
from . import schemas
from .common_bases import gbElement
from . import custom_bases  # not the gbxml package but the gbxml module...


def get_parser(version='6.01'):
    """Returns a lxml.etree.XMLParser containing custom elements for gbXML files.
    
    :param version: The gbxml version string. Default is '6.01'.
    :type version: str
    
    :rtype: lxml.etree.XMLParser
    
    """    
    #create lookup
    lookup = etree.ElementNamespaceClassLookup()
    #set namespace
    namespace = lookup.get_namespace('http://www.gbxml.org/schema')
    #set default element
    namespace[None]=gbElement
    
    # load xsd_schema
    xsd_schema_text=pkg_resources.read_text(schemas, 
                                            'GreenBuildingXML_Ver%s.xsd' % version)
    xsd_schema=etree.fromstring(xsd_schema_text.encode())#.getroot()
    
    
    # load schema_dict
    schema_text = pkg_resources.read_text(schema_dicts, 
                                          'schema_dict_%s.json' % version.replace('.','_'))
    schema_dict=json.loads(schema_text)
    
    # load autogenerated gbElements_X_XX module
    auto_gbElement_module = importlib.import_module('.auto.gbElements_%s' % version.replace('.','_'),
                                                    'xgbxml')
    #print(auto_gbElement_module)
    
    # loop through classes in module
    for k,v in auto_gbElement_module.__dict__.items():
        
        if not k.startswith('__'):
            
            element_name=k[:-5].replace('-','_')
            #print(element_name)
            
            base_classes=[gbElement,v]
            
            # add custom written element class in gbxml directory if it exists
            try:
            
                #module = importlib.import_module('.'+element_name,'gbxml')
                #kls=module.__dict__[element_name]
                kls=custom_bases.__dict__[element_name]
                base_classes.append(kls)
                
            #except ModuleNotFoundError:
            except KeyError:
                
                pass
                
            # add class for element into namespace
            namespace[element_name.replace('_','-')]=\
                type(element_name,
                     tuple(base_classes),
                     dict(
                         _class_schema_dict=schema_dict,
                         _xsd_schema=xsd_schema
                         )
                     )
            
    
    parser = etree.XMLParser()
    parser.set_element_class_lookup(lookup)
    return parser


def create_gbXML(id=None,
                 engine=None,
                 temperatureUnit='C',
                 lengthUnit='Meters',
                 areaUnit='SquareMeters',
                 volumeUnit='CubicMeters',
                 useSIUnitsForResults=True,
                 version='6.01',
                 SurfaceReferenceLocation=None
                 ):
    """Returns a root <gbXML> element for a new, blank gbXML file.
    
    .. note::
        
        The returned object is a subclass of lxml.Element, not an lxml.ElementTree.
    
    :rtype: gbXML
    
    
    """
    xml='<gbXML version="%s" xmlns="http://www.gbxml.org/schema"></gbXML>' % version
    parser=get_parser(version)
    root=etree.fromstring(xml,parser)
    
    if not id is None: root.id=id
    if not engine is None: root.engine=engine
    root.temperatureUnit=temperatureUnit
    root.lengthUnit=lengthUnit
    root.areaUnit=areaUnit
    root.volumeUnit=volumeUnit
    root.useSIUnitsForResults=useSIUnitsForResults
    if not SurfaceReferenceLocation is None: root.SurfaceReferenceLocation=SurfaceReferenceLocation
    
    return root
    
    
    
    
    
    
    
    
    
