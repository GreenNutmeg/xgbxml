# gbElements_8_01.py
# autogenerated

class gbXML_auto():
	""""""

	@property
	def engine(self):
		return self.get_attribute('engine')


	@engine.setter
	def engine(self,value):
		self.set_attribute('engine',value)


	@property
	def temperatureUnit(self):
		"""This attribute specifies the default temperature unit for the entire gbXML document, wherever the temperatureUnit simple type is used."""
		return self.get_attribute('temperatureUnit')


	@temperatureUnit.setter
	def temperatureUnit(self,value):
		self.set_attribute('temperatureUnit',value)


	@property
	def lengthUnit(self):
		"""This attribute specifies the default length unit for the entire gbXML document, wherever the lengthUnit simple type is used."""
		return self.get_attribute('lengthUnit')


	@lengthUnit.setter
	def lengthUnit(self,value):
		self.set_attribute('lengthUnit',value)


	@property
	def areaUnit(self):
		"""This attribute specifies the default area unit for the entire gbXML document, wherever the areaUnit simple type is used."""
		return self.get_attribute('areaUnit')


	@areaUnit.setter
	def areaUnit(self,value):
		self.set_attribute('areaUnit',value)


	@property
	def volumeUnit(self):
		"""This attribute specifies the default volume unit for the entire gbXML document, wherever the volumeUnit simple type is used."""
		return self.get_attribute('volumeUnit')


	@volumeUnit.setter
	def volumeUnit(self,value):
		self.set_attribute('volumeUnit',value)


	@property
	def useSIUnitsForResults(self):
		"""Results will be given in SI or IP units. True = SI units which is the implied default. If False, results will be in english units."""
		return self.get_attribute('useSIUnitsForResults')


	@useSIUnitsForResults.setter
	def useSIUnitsForResults(self,value):
		self.set_attribute('useSIUnitsForResults',value)


	@property
	def version(self):
		return self.get_attribute('version')


	@version.setter
	def version(self,value):
		self.set_attribute('version',value)


	@property
	def SurfaceReferenceLocation(self):
		"""Use this attribute to determine what type of geometry information is included in the geometry elements. This is specified using an enumeration that includes shell/wall paper and centerline coordinates."""
		return self.get_attribute('SurfaceReferenceLocation')


	@SurfaceReferenceLocation.setter
	def SurfaceReferenceLocation(self,value):
		self.set_attribute('SurfaceReferenceLocation',value)


	@property
	def aecXML(self):
		return self.get_child('aecXML')


	@property
	def aecXMLs(self):
		return self.get_children('aecXML')


	def add_aecXML(self,
		):
		return self.add_child('aecXML',
			)


	@property
	def Campus(self):
		return self.get_child('Campus')


	@property
	def Campuss(self):
		return self.get_children('Campus')


	def add_Campus(self,
		id=None,
		designHeatWeathIdRef=None,
		designCoolWeathIdRef=None,
		ifcGUID=None,
		):
		return self.add_child('Campus',
			id=id,
			designHeatWeathIdRef=designHeatWeathIdRef,
			designCoolWeathIdRef=designCoolWeathIdRef,
			ifcGUID=ifcGUID,
			)


	@property
	def LightingSystem(self):
		return self.get_child('LightingSystem')


	@property
	def LightingSystems(self):
		return self.get_children('LightingSystem')


	def add_LightingSystem(self,
		id=None,
		programId=None,
		):
		return self.add_child('LightingSystem',
			id=id,
			programId=programId,
			)


	@property
	def LightingControl(self):
		return self.get_child('LightingControl')


	@property
	def LightingControls(self):
		return self.get_children('LightingControl')


	def add_LightingControl(self,
		type=None,
		id=None,
		lightingSystemIdRef=None,
		programId=None,
		):
		return self.add_child('LightingControl',
			type=type,
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			programId=programId,
			)


	@property
	def Construction(self):
		return self.get_child('Construction')


	@property
	def Constructions(self):
		return self.get_children('Construction')


	def add_Construction(self,
		id=None,
		DOELibIdRef=None,
		programId=None,
		constructionIsSchematic=None,
		):
		return self.add_child('Construction',
			id=id,
			DOELibIdRef=DOELibIdRef,
			programId=programId,
			constructionIsSchematic=constructionIsSchematic,
			)


	@property
	def Layer(self):
		return self.get_child('Layer')


	@property
	def Layers(self):
		return self.get_children('Layer')


	def add_Layer(self,
		id=None,
		DOELibIdRef=None,
		):
		return self.add_child('Layer',
			id=id,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def Material(self):
		return self.get_child('Material')


	@property
	def Materials(self):
		return self.get_children('Material')


	def add_Material(self,
		id=None,
		DOELibIdRef=None,
		):
		return self.add_child('Material',
			id=id,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def WindowType(self):
		return self.get_child('WindowType')


	@property
	def WindowTypes(self):
		return self.get_children('WindowType')


	def add_WindowType(self,
		id=None,
		windowTypeIsSchematic=None,
		DOELibIdRef=None,
		programId=None,
		):
		return self.add_child('WindowType',
			id=id,
			windowTypeIsSchematic=windowTypeIsSchematic,
			DOELibIdRef=DOELibIdRef,
			programId=programId,
			)


	@property
	def Schedule(self):
		return self.get_child('Schedule')


	@property
	def Schedules(self):
		return self.get_children('Schedule')


	def add_Schedule(self,
		id=None,
		type=None,
		programId=None,
		):
		return self.add_child('Schedule',
			id=id,
			type=type,
			programId=programId,
			)


	@property
	def WeekSchedule(self):
		return self.get_child('WeekSchedule')


	@property
	def WeekSchedules(self):
		return self.get_children('WeekSchedule')


	def add_WeekSchedule(self,
		id=None,
		scheduleType=None,
		scheduleTypeLimitsId=None,
		):
		return self.add_child('WeekSchedule',
			id=id,
			scheduleType=scheduleType,
			scheduleTypeLimitsId=scheduleTypeLimitsId,
			)


	@property
	def DaySchedule(self):
		return self.get_child('DaySchedule')


	@property
	def DaySchedules(self):
		return self.get_children('DaySchedule')


	def add_DaySchedule(self,
		id=None,
		scheduleType=None,
		scheduleTypeLimitsId=None,
		):
		return self.add_child('DaySchedule',
			id=id,
			scheduleType=scheduleType,
			scheduleTypeLimitsId=scheduleTypeLimitsId,
			)


	@property
	def Zone(self):
		return self.get_child('Zone')


	@property
	def Zones(self):
		return self.get_children('Zone')


	def add_Zone(self,
		id=None,
		heatSchedIdRef=None,
		coolSchedIdRef=None,
		outAirSchedIdRef=None,
		airChangesSchedIdRef=None,
		fanSchedIdRef=None,
		fanTempSchedIdRef=None,
		ifcGUID=None,
		programId=None,
		):
		return self.add_child('Zone',
			id=id,
			heatSchedIdRef=heatSchedIdRef,
			coolSchedIdRef=coolSchedIdRef,
			outAirSchedIdRef=outAirSchedIdRef,
			airChangesSchedIdRef=airChangesSchedIdRef,
			fanSchedIdRef=fanSchedIdRef,
			fanTempSchedIdRef=fanTempSchedIdRef,
			ifcGUID=ifcGUID,
			programId=programId,
			)


	@property
	def AirLoop(self):
		return self.get_child('AirLoop')


	@property
	def AirLoops(self):
		return self.get_children('AirLoop')


	def add_AirLoop(self,
		id=None,
		controlZoneIdRef=None,
		systemType=None,
		programId=None,
		):
		return self.add_child('AirLoop',
			id=id,
			controlZoneIdRef=controlZoneIdRef,
			systemType=systemType,
			programId=programId,
			)


	@property
	def HydronicLoop(self):
		return self.get_child('HydronicLoop')


	@property
	def HydronicLoops(self):
		return self.get_children('HydronicLoop')


	def add_HydronicLoop(self,
		loopType=None,
		controlZoneIdRef=None,
		primaryLoopId=None,
		fluidType=None,
		chillerType=None,
		id=None,
		programId=None,
		):
		return self.add_child('HydronicLoop',
			loopType=loopType,
			controlZoneIdRef=controlZoneIdRef,
			primaryLoopId=primaryLoopId,
			fluidType=fluidType,
			chillerType=chillerType,
			id=id,
			programId=programId,
			)


	@property
	def AirSystem(self):
		return self.get_child('AirSystem')


	@property
	def AirSystems(self):
		return self.get_children('AirSystem')


	def add_AirSystem(self,
		preheatCoilType=None,
		heatingCoilType=None,
		coolingCoilType=None,
		id=None,
		):
		return self.add_child('AirSystem',
			preheatCoilType=preheatCoilType,
			heatingCoilType=heatingCoilType,
			coolingCoilType=coolingCoilType,
			id=id,
			)


	@property
	def IntEquip(self):
		return self.get_child('IntEquip')


	@property
	def IntEquips(self):
		return self.get_children('IntEquip')


	def add_IntEquip(self,
		id=None,
		scheduleIdRef=None,
		waterTempScheduleIdRef=None,
		hydronicLoopIdRef=None,
		waterScheduleIdRef=None,
		waterMeterIdRef=None,
		type=None,
		airLoopIdRef=None,
		programId=None,
		):
		return self.add_child('IntEquip',
			id=id,
			scheduleIdRef=scheduleIdRef,
			waterTempScheduleIdRef=waterTempScheduleIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			waterScheduleIdRef=waterScheduleIdRef,
			waterMeterIdRef=waterMeterIdRef,
			type=type,
			airLoopIdRef=airLoopIdRef,
			programId=programId,
			)


	@property
	def ExtEquip(self):
		return self.get_child('ExtEquip')


	@property
	def ExtEquips(self):
		return self.get_children('ExtEquip')


	def add_ExtEquip(self,
		id=None,
		scheduleIdRef=None,
		waterTempScheduleIdRef=None,
		hydronicLoopIdRef=None,
		waterScheduleIdRef=None,
		waterMeterIdRef=None,
		type=None,
		airLoopIdRef=None,
		programId=None,
		):
		return self.add_child('ExtEquip',
			id=id,
			scheduleIdRef=scheduleIdRef,
			waterTempScheduleIdRef=waterTempScheduleIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			waterScheduleIdRef=waterScheduleIdRef,
			waterMeterIdRef=waterMeterIdRef,
			type=type,
			airLoopIdRef=airLoopIdRef,
			programId=programId,
			)


	@property
	def Weather(self):
		return self.get_child('Weather')


	@property
	def Weathers(self):
		return self.get_children('Weather')


	def add_Weather(self,
		id=None,
		programId=None,
		):
		return self.add_child('Weather',
			id=id,
			programId=programId,
			)


	@property
	def Meter(self):
		return self.get_child('Meter')


	@property
	def Meters(self):
		return self.get_children('Meter')


	def add_Meter(self,
		id=None,
		resourceType=None,
		programId=None,
		):
		return self.add_child('Meter',
			id=id,
			resourceType=resourceType,
			programId=programId,
			)


	@property
	def Results(self):
		return self.get_child('Results')


	@property
	def Resultss(self):
		return self.get_children('Results')


	def add_Results(self,
		id=None,
		unit=None,
		currency=None,
		resultsType=None,
		resourceType=None,
		programId=None,
		valueType=None,
		startTime=None,
		timeIncrement=None,
		):
		return self.add_child('Results',
			id=id,
			unit=unit,
			currency=currency,
			resultsType=resultsType,
			resourceType=resourceType,
			programId=programId,
			valueType=valueType,
			startTime=startTime,
			timeIncrement=timeIncrement,
			)


	@property
	def DocumentHistory(self):
		return self.get_child('DocumentHistory')


	@property
	def DocumentHistorys(self):
		return self.get_children('DocumentHistory')


	def add_DocumentHistory(self,
		):
		return self.add_child('DocumentHistory',
			)


	@property
	def SimulationParameters(self):
		return self.get_child('SimulationParameters')


	@property
	def SimulationParameterss(self):
		return self.get_children('SimulationParameters')


	def add_SimulationParameters(self,
		version=None,
		timestep=None,
		):
		return self.add_child('SimulationParameters',
			version=version,
			timestep=timestep,
			)


	@property
	def ZoneHVACEquipment(self):
		return self.get_child('ZoneHVACEquipment')


	@property
	def ZoneHVACEquipments(self):
		return self.get_children('ZoneHVACEquipment')


	def add_ZoneHVACEquipment(self,
		id=None,
		zoneHVACEquipmentType=None,
		heatingCoilType=None,
		coolingCoilType=None,
		drawVentilation=None,
		):
		return self.add_child('ZoneHVACEquipment',
			id=id,
			zoneHVACEquipmentType=zoneHVACEquipmentType,
			heatingCoilType=heatingCoilType,
			coolingCoilType=coolingCoilType,
			drawVentilation=drawVentilation,
			)


	@property
	def Occupants(self):
		return self.get_child('Occupants')


	@property
	def Occupantss(self):
		return self.get_children('Occupants')


	def add_Occupants(self,
		):
		return self.add_child('Occupants',
			)


	@property
	def Behaviors(self):
		return self.get_child('Behaviors')


	@property
	def Behaviorss(self):
		return self.get_children('Behaviors')


	def add_Behaviors(self,
		):
		return self.add_child('Behaviors',
			)



class aecXML_auto():
	""""""


class Absorptance_auto():
	"""Absorptance of the outside surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class AdjacentSpaceId_auto():
	""""""

	@property
	def spaceIdRef(self):
		"""References the ID of a Space that is bounded by this surface. First AdjacentSpaceId entered will determine how the referenced construction layers are ordered with the first construction layer being in contact with the outside or 2nd space listed and the last layer in contact with the first space listed. The outward normal of the surface, as defined by the right hand rule of the coordinates in the planar geometry element, is always pointing away from the first AdjacentSpaceID listed."""
		return self.get_attribute('spaceIdRef')


	@spaceIdRef.setter
	def spaceIdRef(self,value):
		self.set_attribute('spaceIdRef',value)


	@property
	def surfaceType(self):
		"""With interior horizontal surfaces, this attribute can distinguish between ceiling and floor surfaces to avoid double-counting of floor areas, etc. If not present, the surface type can be assumed based on the description of the surface type enums. When the surfaceTypeEnum is provided and the surface attributes (i.e. adjacency, tilt angle) do not match the enumeration's description, the enumeration should have precedence."""
		return self.get_attribute('surfaceType')


	@surfaceType.setter
	def surfaceType(self,value):
		self.set_attribute('surfaceType',value)



class ConstantValue_auto():
	""""""


class Linear1D_auto():
	""""""


class Linear2D_auto():
	""""""


class Linear3D_auto():
	""""""


class Quadratic1D_auto():
	""""""


class Logit1D_auto():
	""""""


class Logit2D_auto():
	""""""


class Logit3D_auto():
	""""""


class Weibull1D_auto():
	""""""


class Logit1DQuadratic_auto():
	""""""


class ControlValue_auto():
	""""""


class InteractionType_auto():
	""""""


class ParameterType_auto():
	"""Parameter type can be simple (integer, flow, boolean, string) or complex (combination of simples or equation)."""


class Formula_auto():
	""""""

	@property
	def ConstantValue(self):
		return self.get_child('ConstantValue')


	@property
	def ConstantValues(self):
		return self.get_children('ConstantValue')


	def add_ConstantValue(self,
		):
		return self.add_child('ConstantValue',
			)


	@property
	def Linear1D(self):
		return self.get_child('Linear1D')


	@property
	def Linear1Ds(self):
		return self.get_children('Linear1D')


	def add_Linear1D(self,
		):
		return self.add_child('Linear1D',
			)


	@property
	def Linear2D(self):
		return self.get_child('Linear2D')


	@property
	def Linear2Ds(self):
		return self.get_children('Linear2D')


	def add_Linear2D(self,
		):
		return self.add_child('Linear2D',
			)


	@property
	def Linear3D(self):
		return self.get_child('Linear3D')


	@property
	def Linear3Ds(self):
		return self.get_children('Linear3D')


	def add_Linear3D(self,
		):
		return self.add_child('Linear3D',
			)


	@property
	def Quadratic1D(self):
		return self.get_child('Quadratic1D')


	@property
	def Quadratic1Ds(self):
		return self.get_children('Quadratic1D')


	def add_Quadratic1D(self,
		):
		return self.add_child('Quadratic1D',
			)


	@property
	def Logit1D(self):
		return self.get_child('Logit1D')


	@property
	def Logit1Ds(self):
		return self.get_children('Logit1D')


	def add_Logit1D(self,
		):
		return self.add_child('Logit1D',
			)


	@property
	def Logit2D(self):
		return self.get_child('Logit2D')


	@property
	def Logit2Ds(self):
		return self.get_children('Logit2D')


	def add_Logit2D(self,
		):
		return self.add_child('Logit2D',
			)


	@property
	def Logit3D(self):
		return self.get_child('Logit3D')


	@property
	def Logit3Ds(self):
		return self.get_children('Logit3D')


	def add_Logit3D(self,
		):
		return self.add_child('Logit3D',
			)


	@property
	def Weibull1D(self):
		return self.get_child('Weibull1D')


	@property
	def Weibull1Ds(self):
		return self.get_children('Weibull1D')


	def add_Weibull1D(self,
		):
		return self.add_child('Weibull1D',
			)


	@property
	def Logit1DQuadratic(self):
		return self.get_child('Logit1DQuadratic')


	@property
	def Logit1DQuadratics(self):
		return self.get_children('Logit1DQuadratic')


	def add_Logit1DQuadratic(self,
		):
		return self.add_child('Logit1DQuadratic',
			)



class Interaction_auto():
	"""Interaction type and its probability model can be specified."""

	@property
	def InteractionType(self):
		return self.get_child('InteractionType')


	@property
	def InteractionTypes(self):
		return self.get_children('InteractionType')


	def add_InteractionType(self,
		):
		return self.add_child('InteractionType',
			)


	@property
	def Formula(self):
		return self.get_child('Formula')


	@property
	def Formulas(self):
		return self.get_children('Formula')


	def add_Formula(self,
		):
		return self.add_child('Formula',
			)


	@property
	def ControlValue(self):
		return self.get_child('ControlValue')


	@property
	def ControlValues(self):
		return self.get_children('ControlValue')


	def add_ControlValue(self,
		):
		return self.add_child('ControlValue',
			)



class SeasonType_auto():
	""""""


class DayofWeek_auto():
	""""""


class SpaceOccupancy_auto():
	"""Occupancy percentage of staying in a specific category in a building"""


class RandomMovementEvent_auto():
	"""Occupant location change events inside a building"""


class StatusTransitionEventType_auto():
	"""The event type, e.g. arrival or departure"""


class MarkovChainModel_auto():
	""""""


class EventOccurModel_auto():
	"""The event occur model"""

	@property
	def CustomProbabilityModel(self):
		return self.get_child('CustomProbabilityModel')


	@property
	def CustomProbabilityModels(self):
		return self.get_children('CustomProbabilityModel')


	def add_CustomProbabilityModel(self,
		):
		return self.add_child('CustomProbabilityModel',
			)


	@property
	def MarkovChainModel(self):
		return self.get_child('MarkovChainModel')


	@property
	def MarkovChainModels(self):
		return self.get_children('MarkovChainModel')


	def add_MarkovChainModel(self,
		):
		return self.add_child('MarkovChainModel',
			)


	@property
	def NormalProbabilityModel(self):
		return self.get_child('NormalProbabilityModel')


	@property
	def NormalProbabilityModels(self):
		return self.get_children('NormalProbabilityModel')


	def add_NormalProbabilityModel(self,
		):
		return self.add_child('NormalProbabilityModel',
			)



class NormalDurationModel_auto():
	""""""


class EventDuration_auto():
	"""Duration properties of an event. If specify, the event will end after the duration."""


class StatusTransitionEvent_auto():
	"""Occupancy status and location change events in building level"""


class MovementBehavior_auto():
	"""Behavior regarding location change of an occupant """

	@property
	def ID(self):
		return self.get_attribute('ID')


	@ID.setter
	def ID(self,value):
		self.set_attribute('ID',value)


	@property
	def Name(self):
		return self.get_attribute('Name')


	@Name.setter
	def Name(self,value):
		self.set_attribute('Name',value)


	@property
	def IfcGuid(self):
		return self.get_attribute('IfcGuid')


	@IfcGuid.setter
	def IfcGuid(self,value):
		self.set_attribute('IfcGuid',value)



class IsSpecialBehavior_auto():
	"""Set to true when this is a special behavior. When the special behavior is triggered, other behaviors are ignored."""


class Behavior_auto():
	"""Behavior related to the interaction with buildings"""

	@property
	def ID(self):
		"""Identification of the specific behavior defined in this branch can be given."""
		return self.get_attribute('ID')


	@ID.setter
	def ID(self,value):
		self.set_attribute('ID',value)


	@property
	def Name(self):
		return self.get_attribute('Name')


	@Name.setter
	def Name(self,value):
		self.set_attribute('Name',value)


	@property
	def IfcGuid(self):
		return self.get_attribute('IfcGuid')


	@IfcGuid.setter
	def IfcGuid(self,value):
		self.set_attribute('IfcGuid',value)


	@property
	def AppliedBuildingType(self):
		return self.get_attribute('AppliedBuildingType')


	@AppliedBuildingType.setter
	def AppliedBuildingType(self,value):
		self.set_attribute('AppliedBuildingType',value)


	@property
	def BuildingTypeComment(self):
		return self.get_attribute('BuildingTypeComment')


	@BuildingTypeComment.setter
	def BuildingTypeComment(self,value):
		self.set_attribute('BuildingTypeComment',value)


	@property
	def ActionType(self):
		return self.get_attribute('ActionType')


	@ActionType.setter
	def ActionType(self,value):
		self.set_attribute('ActionType',value)


	@property
	def SystemType(self):
		return self.get_attribute('SystemType')


	@SystemType.setter
	def SystemType(self,value):
		self.set_attribute('SystemType',value)


	@property
	def PaperAuthors(self):
		return self.get_attribute('PaperAuthors')


	@PaperAuthors.setter
	def PaperAuthors(self,value):
		self.set_attribute('PaperAuthors',value)


	@property
	def PaperYear(self):
		return self.get_attribute('PaperYear')


	@PaperYear.setter
	def PaperYear(self,value):
		self.set_attribute('PaperYear',value)


	@property
	def PaperTitle(self):
		return self.get_attribute('PaperTitle')


	@PaperTitle.setter
	def PaperTitle(self,value):
		self.set_attribute('PaperTitle',value)


	@property
	def PaperDOI(self):
		return self.get_attribute('PaperDOI')


	@PaperDOI.setter
	def PaperDOI(self,value):
		self.set_attribute('PaperDOI',value)


	@property
	def DataCollectionRegion(self):
		return self.get_attribute('DataCollectionRegion')


	@DataCollectionRegion.setter
	def DataCollectionRegion(self,value):
		self.set_attribute('DataCollectionRegion',value)


	@property
	def TypesDataCollected1(self):
		return self.get_attribute('TypesDataCollected1')


	@TypesDataCollected1.setter
	def TypesDataCollected1(self,value):
		self.set_attribute('TypesDataCollected1',value)


	@property
	def TypesDataCollected2(self):
		return self.get_attribute('TypesDataCollected2')


	@TypesDataCollected2.setter
	def TypesDataCollected2(self,value):
		self.set_attribute('TypesDataCollected2',value)


	@property
	def TypesDataCollected3(self):
		return self.get_attribute('TypesDataCollected3')


	@TypesDataCollected3.setter
	def TypesDataCollected3(self,value):
		self.set_attribute('TypesDataCollected3',value)


	@property
	def TypesDataCollectedOther(self):
		return self.get_attribute('TypesDataCollectedOther')


	@TypesDataCollectedOther.setter
	def TypesDataCollectedOther(self,value):
		self.set_attribute('TypesDataCollectedOther',value)


	@property
	def SampleSize(self):
		return self.get_attribute('SampleSize')


	@SampleSize.setter
	def SampleSize(self,value):
		self.set_attribute('SampleSize',value)



class TimeFrequencyType_auto():
	"""The event type, e.g. start and end"""


class CustomProbabilityModel_auto():
	""""""


class NormalProbabilityModel_auto():
	""""""


class ActivityOccurModel_auto():
	"""The event occur model"""

	@property
	def CustomProbabilityModel(self):
		return self.get_child('CustomProbabilityModel')


	@property
	def CustomProbabilityModels(self):
		return self.get_children('CustomProbabilityModel')


	def add_CustomProbabilityModel(self,
		):
		return self.add_child('CustomProbabilityModel',
			)


	@property
	def NormalProbabilityModel(self):
		return self.get_child('NormalProbabilityModel')


	@property
	def NormalProbabilityModels(self):
		return self.get_children('NormalProbabilityModel')


	def add_NormalProbabilityModel(self,
		):
		return self.add_child('NormalProbabilityModel',
			)



class ActivityDuration_auto():
	"""Duration properties of an activity. If specify, the event will end after the duration."""


class StatusOfActivity_auto():
	"""Activity status in space level"""


class Activity_auto():
	"""Regarding the types of activities of an occupant """

	@property
	def ID(self):
		return self.get_attribute('ID')


	@ID.setter
	def ID(self,value):
		self.set_attribute('ID',value)


	@property
	def Name(self):
		return self.get_attribute('Name')


	@Name.setter
	def Name(self,value):
		self.set_attribute('Name',value)


	@property
	def IfcGuid(self):
		return self.get_attribute('IfcGuid')


	@IfcGuid.setter
	def IfcGuid(self,value):
		self.set_attribute('IfcGuid',value)



class Actions_auto():
	"""Occupants can conduct an action in order to satisfy their needs. The action may be an interaction with a system or movement to another location. """

	@property
	def Interaction(self):
		return self.get_child('Interaction')


	@property
	def Interactions(self):
		return self.get_children('Interaction')


	def add_Interaction(self,
		):
		return self.add_child('Interaction',
			)



class Age_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AirChangesPerHour_auto():
	""""""


class AirLoop_auto():
	"""The AirLoop element represents the equipment serving one path of air"""

	@property
	def controlZoneIdRef(self):
		return self.get_attribute('controlZoneIdRef')


	@controlZoneIdRef.setter
	def controlZoneIdRef(self,value):
		self.set_attribute('controlZoneIdRef',value)


	@property
	def systemType(self):
		return self.get_attribute('systemType')


	@systemType.setter
	def systemType(self,value):
		self.set_attribute('systemType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def AirLoopEquipment(self):
		return self.get_child('AirLoopEquipment')


	@property
	def AirLoopEquipments(self):
		return self.get_children('AirLoopEquipment')


	def add_AirLoopEquipment(self,
		id=None,
		equipmentType=None,
		programId=None,
		):
		return self.add_child('AirLoopEquipment',
			id=id,
			equipmentType=equipmentType,
			programId=programId,
			)


	@property
	def TemperatureControl(self):
		return self.get_child('TemperatureControl')


	@property
	def TemperatureControls(self):
		return self.get_children('TemperatureControl')


	def add_TemperatureControl(self,
		):
		return self.add_child('TemperatureControl',
			)


	@property
	def PressureControl(self):
		return self.get_child('PressureControl')


	@property
	def PressureControls(self):
		return self.get_children('PressureControl')


	def add_PressureControl(self,
		):
		return self.add_child('PressureControl',
			)



class AirLoopEquipment_auto():
	"""A piece of equipment serving an air-loop. This is generalized to be able to contain any type of air loop equipment. The air loop equipment are ordered as they exist on the airloop. A blow-through system should have fan listed before the coils. A draw-through system should have the fan listed after the coils."""

	@property
	def equipmentType(self):
		return self.get_attribute('equipmentType')


	@equipmentType.setter
	def equipmentType(self,value):
		self.set_attribute('equipmentType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def MinFlow(self):
		return self.get_child('MinFlow')


	@property
	def MinFlows(self):
		return self.get_children('MinFlow')


	def add_MinFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('MinFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def MaximumFlow(self):
		return self.get_child('MaximumFlow')


	@property
	def MaximumFlows(self):
		return self.get_children('MaximumFlow')


	def add_MaximumFlow(self,
		unit=None,
		):
		return self.add_child('MaximumFlow',
			unit=unit,
			)


	@property
	def MaximumFlowFractionDuringReheat(self):
		return self.get_child('MaximumFlowFractionDuringReheat')


	@property
	def MaximumFlowFractionDuringReheats(self):
		return self.get_children('MaximumFlowFractionDuringReheat')


	def add_MaximumFlowFractionDuringReheat(self,
		):
		return self.add_child('MaximumFlowFractionDuringReheat',
			)


	@property
	def OperationSchedule(self):
		return self.get_child('OperationSchedule')


	@property
	def OperationSchedules(self):
		return self.get_children('OperationSchedule')


	def add_OperationSchedule(self,
		scheduleIdRef=None,
		):
		return self.add_child('OperationSchedule',
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def MotorInAirstream(self):
		return self.get_child('MotorInAirstream')


	@property
	def MotorInAirstreams(self):
		return self.get_children('MotorInAirstream')


	def add_MotorInAirstream(self,
		):
		return self.add_child('MotorInAirstream',
			)


	@property
	def Temp(self):
		return self.get_child('Temp')


	@property
	def Temps(self):
		return self.get_children('Temp')


	def add_Temp(self,
		unit=None,
		tempType=None,
		):
		return self.add_child('Temp',
			unit=unit,
			tempType=tempType,
			)


	@property
	def Enthalpy(self):
		return self.get_child('Enthalpy')


	@property
	def Enthalpys(self):
		return self.get_children('Enthalpy')


	def add_Enthalpy(self,
		unit=None,
		enthalpyType=None,
		):
		return self.add_child('Enthalpy',
			unit=unit,
			enthalpyType=enthalpyType,
			)


	@property
	def EconomizerLockout(self):
		return self.get_child('EconomizerLockout')


	@property
	def EconomizerLockouts(self):
		return self.get_children('EconomizerLockout')


	def add_EconomizerLockout(self,
		unit=None,
		):
		return self.add_child('EconomizerLockout',
			unit=unit,
			)


	@property
	def ResetTemperature(self):
		return self.get_child('ResetTemperature')


	@property
	def ResetTemperatures(self):
		return self.get_children('ResetTemperature')


	def add_ResetTemperature(self,
		unit=None,
		type=None,
		resetSchedIdRef=None,
		):
		return self.add_child('ResetTemperature',
			unit=unit,
			type=type,
			resetSchedIdRef=resetSchedIdRef,
			)


	@property
	def DeltaP(self):
		return self.get_child('DeltaP')


	@property
	def DeltaPs(self):
		return self.get_children('DeltaP')


	def add_DeltaP(self,
		unit=None,
		hydronicLoopType=None,
		hydronicLoopIdRef=None,
		conditioningType=None,
		performanceId=None,
		):
		return self.add_child('DeltaP',
			unit=unit,
			hydronicLoopType=hydronicLoopType,
			hydronicLoopIdRef=hydronicLoopIdRef,
			conditioningType=conditioningType,
			performanceId=performanceId,
			)


	@property
	def DeltaT(self):
		return self.get_child('DeltaT')


	@property
	def DeltaTs(self):
		return self.get_children('DeltaT')


	def add_DeltaT(self,
		unit=None,
		conditioningType=None,
		):
		return self.add_child('DeltaT',
			unit=unit,
			conditioningType=conditioningType,
			)


	@property
	def MinRelativeHumidity(self):
		return self.get_child('MinRelativeHumidity')


	@property
	def MinRelativeHumiditys(self):
		return self.get_children('MinRelativeHumidity')


	def add_MinRelativeHumidity(self,
		unit=None,
		):
		return self.add_child('MinRelativeHumidity',
			unit=unit,
			)


	@property
	def MaxRelativeHumidity(self):
		return self.get_child('MaxRelativeHumidity')


	@property
	def MaxRelativeHumiditys(self):
		return self.get_children('MaxRelativeHumidity')


	def add_MaxRelativeHumidity(self,
		unit=None,
		):
		return self.add_child('MaxRelativeHumidity',
			unit=unit,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def Capacity(self):
		return self.get_child('Capacity')


	@property
	def Capacitys(self):
		return self.get_children('Capacity')


	def add_Capacity(self,
		unit=None,
		capacityType=None,
		):
		return self.add_child('Capacity',
			unit=unit,
			capacityType=capacityType,
			)


	@property
	def Control(self):
		return self.get_child('Control')


	@property
	def Controls(self):
		return self.get_children('Control')


	def add_Control(self,
		controlType=None,
		stages=None,
		minPowerRatio=None,
		operationType=None,
		performanceIdRef=None,
		):
		return self.add_child('Control',
			controlType=controlType,
			stages=stages,
			minPowerRatio=minPowerRatio,
			operationType=operationType,
			performanceIdRef=performanceIdRef,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def AirStreamFraction(self):
		return self.get_child('AirStreamFraction')


	@property
	def AirStreamFractions(self):
		return self.get_children('AirStreamFraction')


	def add_AirStreamFraction(self,
		):
		return self.add_child('AirStreamFraction',
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def Life(self):
		return self.get_child('Life')


	@property
	def Lifes(self):
		return self.get_children('Life')


	def add_Life(self,
		unit=None,
		):
		return self.add_child('Life',
			unit=unit,
			)


	@property
	def WaterLoss(self):
		return self.get_child('WaterLoss')


	@property
	def WaterLosss(self):
		return self.get_children('WaterLoss')


	def add_WaterLoss(self,
		unit=None,
		):
		return self.add_child('WaterLoss',
			unit=unit,
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		coilType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			coilType=coilType,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def RefrigerantType(self):
		return self.get_child('RefrigerantType')


	@property
	def RefrigerantTypes(self):
		return self.get_children('RefrigerantType')


	def add_RefrigerantType(self,
		):
		return self.add_child('RefrigerantType',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def FlowType(self):
		return self.get_child('FlowType')


	@property
	def FlowTypes(self):
		return self.get_children('FlowType')


	def add_FlowType(self,
		flowType=None,
		):
		return self.add_child('FlowType',
			flowType=flowType,
			)


	@property
	def ParallelFanOnFlowFraction(self):
		return self.get_child('ParallelFanOnFlowFraction')


	@property
	def ParallelFanOnFlowFractions(self):
		return self.get_children('ParallelFanOnFlowFraction')


	def add_ParallelFanOnFlowFraction(self,
		):
		return self.add_child('ParallelFanOnFlowFraction',
			)


	@property
	def NightCycleControl(self):
		return self.get_child('NightCycleControl')


	@property
	def NightCycleControls(self):
		return self.get_children('NightCycleControl')


	def add_NightCycleControl(self,
		unit=None,
		):
		return self.add_child('NightCycleControl',
			unit=unit,
			)


	@property
	def HeatRecoveryType(self):
		return self.get_child('HeatRecoveryType')


	@property
	def HeatRecoveryTypes(self):
		return self.get_children('HeatRecoveryType')


	def add_HeatRecoveryType(self,
		unit=None,
		):
		return self.add_child('HeatRecoveryType',
			unit=unit,
			)


	@property
	def SensibleHeatRecoveryEffectiveness(self):
		return self.get_child('SensibleHeatRecoveryEffectiveness')


	@property
	def SensibleHeatRecoveryEffectivenesss(self):
		return self.get_children('SensibleHeatRecoveryEffectiveness')


	def add_SensibleHeatRecoveryEffectiveness(self,
		):
		return self.add_child('SensibleHeatRecoveryEffectiveness',
			)


	@property
	def LatentHeatRecoveryEffectiveness(self):
		return self.get_child('LatentHeatRecoveryEffectiveness')


	@property
	def LatentHeatRecoveryEffectivenesss(self):
		return self.get_children('LatentHeatRecoveryEffectiveness')


	def add_LatentHeatRecoveryEffectiveness(self,
		):
		return self.add_child('LatentHeatRecoveryEffectiveness',
			)


	@property
	def CoolingCoilSetpointResetType(self):
		return self.get_child('CoolingCoilSetpointResetType')


	@property
	def CoolingCoilSetpointResetTypes(self):
		return self.get_children('CoolingCoilSetpointResetType')


	def add_CoolingCoilSetpointResetType(self,
		unit=None,
		):
		return self.add_child('CoolingCoilSetpointResetType',
			unit=unit,
			)


	@property
	def HeatingCoilSetpointResetType(self):
		return self.get_child('HeatingCoilSetpointResetType')


	@property
	def HeatingCoilSetpointResetTypes(self):
		return self.get_children('HeatingCoilSetpointResetType')


	def add_HeatingCoilSetpointResetType(self,
		unit=None,
		):
		return self.add_child('HeatingCoilSetpointResetType',
			unit=unit,
			)


	@property
	def DamperHeatingAction(self):
		return self.get_child('DamperHeatingAction')


	@property
	def DamperHeatingActions(self):
		return self.get_children('DamperHeatingAction')


	def add_DamperHeatingAction(self,
		unit=None,
		):
		return self.add_child('DamperHeatingAction',
			unit=unit,
			)


	@property
	def HeatPumpDefrostControl(self):
		return self.get_child('HeatPumpDefrostControl')


	@property
	def HeatPumpDefrostControls(self):
		return self.get_children('HeatPumpDefrostControl')


	def add_HeatPumpDefrostControl(self,
		defrostControlType=None,
		):
		return self.add_child('HeatPumpDefrostControl',
			defrostControlType=defrostControlType,
			)


	@property
	def HeatPumpDefrostStrategy(self):
		return self.get_child('HeatPumpDefrostStrategy')


	@property
	def HeatPumpDefrostStrategys(self):
		return self.get_children('HeatPumpDefrostStrategy')


	def add_HeatPumpDefrostStrategy(self,
		unit=None,
		):
		return self.add_child('HeatPumpDefrostStrategy',
			unit=unit,
			)


	@property
	def SupplementalHeatingCoilType(self):
		return self.get_child('SupplementalHeatingCoilType')


	@property
	def SupplementalHeatingCoilTypes(self):
		return self.get_children('SupplementalHeatingCoilType')


	def add_SupplementalHeatingCoilType(self,
		unit=None,
		):
		return self.add_child('SupplementalHeatingCoilType',
			unit=unit,
			)


	@property
	def SupplementalHeatingCoilCapacity(self):
		return self.get_child('SupplementalHeatingCoilCapacity')


	@property
	def SupplementalHeatingCoilCapacitys(self):
		return self.get_children('SupplementalHeatingCoilCapacity')


	def add_SupplementalHeatingCoilCapacity(self,
		):
		return self.add_child('SupplementalHeatingCoilCapacity',
			)


	@property
	def SupplementalGasHeatingCoilEfficiency(self):
		return self.get_child('SupplementalGasHeatingCoilEfficiency')


	@property
	def SupplementalGasHeatingCoilEfficiencys(self):
		return self.get_children('SupplementalGasHeatingCoilEfficiency')


	def add_SupplementalGasHeatingCoilEfficiency(self,
		):
		return self.add_child('SupplementalGasHeatingCoilEfficiency',
			)


	@property
	def SupplementalGasHeatingCoilParasiticElectricLoad(self):
		return self.get_child('SupplementalGasHeatingCoilParasiticElectricLoad')


	@property
	def SupplementalGasHeatingCoilParasiticElectricLoads(self):
		return self.get_children('SupplementalGasHeatingCoilParasiticElectricLoad')


	def add_SupplementalGasHeatingCoilParasiticElectricLoad(self,
		):
		return self.add_child('SupplementalGasHeatingCoilParasiticElectricLoad',
			)


	@property
	def CyclingRateMax(self):
		return self.get_child('CyclingRateMax')


	@property
	def CyclingRateMaxs(self):
		return self.get_children('CyclingRateMax')


	def add_CyclingRateMax(self,
		):
		return self.add_child('CyclingRateMax',
			)


	@property
	def HeatPumpTimeConstant(self):
		return self.get_child('HeatPumpTimeConstant')


	@property
	def HeatPumpTimeConstants(self):
		return self.get_children('HeatPumpTimeConstant')


	def add_HeatPumpTimeConstant(self,
		):
		return self.add_child('HeatPumpTimeConstant',
			)


	@property
	def FractionOnCyclePowerUse(self):
		return self.get_child('FractionOnCyclePowerUse')


	@property
	def FractionOnCyclePowerUses(self):
		return self.get_children('FractionOnCyclePowerUse')


	def add_FractionOnCyclePowerUse(self,
		):
		return self.add_child('FractionOnCyclePowerUse',
			)


	@property
	def HeatPumpFanDelayTime(self):
		return self.get_child('HeatPumpFanDelayTime')


	@property
	def HeatPumpFanDelayTimes(self):
		return self.get_children('HeatPumpFanDelayTime')


	def add_HeatPumpFanDelayTime(self,
		):
		return self.add_child('HeatPumpFanDelayTime',
			)


	@property
	def CoolingCoilType(self):
		return self.get_child('CoolingCoilType')


	@property
	def CoolingCoilTypes(self):
		return self.get_children('CoolingCoilType')


	def add_CoolingCoilType(self,
		unit=None,
		):
		return self.add_child('CoolingCoilType',
			unit=unit,
			)


	@property
	def PreheatCoilType(self):
		return self.get_child('PreheatCoilType')


	@property
	def PreheatCoilTypes(self):
		return self.get_children('PreheatCoilType')


	def add_PreheatCoilType(self,
		unit=None,
		):
		return self.add_child('PreheatCoilType',
			unit=unit,
			)


	@property
	def GasPreheatCoilEfficiency(self):
		return self.get_child('GasPreheatCoilEfficiency')


	@property
	def GasPreheatCoilEfficiencys(self):
		return self.get_children('GasPreheatCoilEfficiency')


	def add_GasPreheatCoilEfficiency(self,
		):
		return self.add_child('GasPreheatCoilEfficiency',
			)


	@property
	def GasPreheatCoilParasiticElectricLoad(self):
		return self.get_child('GasPreheatCoilParasiticElectricLoad')


	@property
	def GasPreheatCoilParasiticElectricLoads(self):
		return self.get_children('GasPreheatCoilParasiticElectricLoad')


	def add_GasPreheatCoilParasiticElectricLoad(self,
		):
		return self.add_child('GasPreheatCoilParasiticElectricLoad',
			)



class AirLoopEquipmentId_auto():
	""""""

	@property
	def airLoopEquipIdRef(self):
		"""ID pointing at an air loop equipment object"""
		return self.get_attribute('airLoopEquipIdRef')


	@airLoopEquipIdRef.setter
	def airLoopEquipIdRef(self,value):
		self.set_attribute('airLoopEquipIdRef',value)



class AirLoopId_auto():
	""""""

	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)



class AirStreamFraction_auto():
	"""Fraction of motor in air stream"""


class HeatExchanger_auto():
	""""""

	@property
	def heatExchangerType(self):
		return self.get_attribute('heatExchangerType')


	@heatExchangerType.setter
	def heatExchangerType(self,value):
		self.set_attribute('heatExchangerType',value)



class Fan_auto():
	""""""

	@property
	def fanType(self):
		return self.get_attribute('fanType')


	@fanType.setter
	def fanType(self,value):
		self.set_attribute('fanType',value)



class AirSystem_auto():
	"""This represents an alternative to the original DOE-2 based AirLoop element. This AirSystem element is geared toward an EnergyPlus and Open Studio workflow."""

	@property
	def preheatCoilType(self):
		return self.get_attribute('preheatCoilType')


	@preheatCoilType.setter
	def preheatCoilType(self,value):
		self.set_attribute('preheatCoilType',value)


	@property
	def heatingCoilType(self):
		return self.get_attribute('heatingCoilType')


	@heatingCoilType.setter
	def heatingCoilType(self,value):
		self.set_attribute('heatingCoilType',value)


	@property
	def coolingCoilType(self):
		return self.get_attribute('coolingCoilType')


	@coolingCoilType.setter
	def coolingCoilType(self,value):
		self.set_attribute('coolingCoilType',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def HeatExchanger(self):
		return self.get_child('HeatExchanger')


	@property
	def HeatExchangers(self):
		return self.get_children('HeatExchanger')


	def add_HeatExchanger(self,
		heatExchangerType=None,
		id=None,
		):
		return self.add_child('HeatExchanger',
			heatExchangerType=heatExchangerType,
			id=id,
			)


	@property
	def Fan(self):
		return self.get_child('Fan')


	@property
	def Fans(self):
		return self.get_children('Fan')


	def add_Fan(self,
		fanType=None,
		id=None,
		):
		return self.add_child('Fan',
			fanType=fanType,
			id=id,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		coilType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			coilType=coilType,
			)


	@property
	def AnalysisParameter(self):
		return self.get_child('AnalysisParameter')


	@property
	def AnalysisParameters(self):
		return self.get_children('AnalysisParameter')


	def add_AnalysisParameter(self,
		parameterType=None,
		unit=None,
		):
		return self.add_child('AnalysisParameter',
			parameterType=parameterType,
			unit=unit,
			)



class AirSystemId_auto():
	""""""

	@property
	def airSystemIdRef(self):
		"""An unique identifier pointing to an air system."""
		return self.get_attribute('airSystemIdRef')


	@airSystemIdRef.setter
	def airSystemIdRef(self,value):
		self.set_attribute('airSystemIdRef',value)



class AirTemperature_auto():
	"""Minimum air temperature before shades are closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class ResetTemperature_auto():
	"""Cooling and Heating Reset Temperature Type"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def resetSchedIdRef(self):
		return self.get_attribute('resetSchedIdRef')


	@resetSchedIdRef.setter
	def resetSchedIdRef(self,value):
		self.set_attribute('resetSchedIdRef',value)



class Albedo_auto():
	"""Reflectance of solar radiation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AltEnergySource_auto():
	"""Alternative energy source"""

	@property
	def altEnergyType(self):
		return self.get_attribute('altEnergyType')


	@altEnergyType.setter
	def altEnergyType(self,value):
		self.set_attribute('altEnergyType',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)



class Area_auto():
	"""Specifies the area of the space or building. This value should be equal to the area enclosed by the physical boundaries of the space, as defined by the intersection of the horizontal plane at the highest floor height and the volumetric model's vertical interior surface planes. Building area should be the sum of space areas whose PeopleNumber element values are greater than zero."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AverageNumberOfFloors_auto():
	""""""


class Azimuth_auto():
	"""Polygon azimuth. The direction of the outward normal for the polygon (surface or opening) defined in RectangularGeometry element. Azimuth is measured in degrees clockwise from North, where North = 0 degrees. Examples: East = 90 deg, South = 180 deg, West = 270 deg. If CADModelAzimuth is defined, the Azimuth value is relative to the CADModelAzimuth value rather then North."""


class Ballast_auto():
	"""Type of ballast used"""


class BaseboardHeatingCapacity_auto():
	"""Baseboard heating capacity"""


class BaseboardHeatingType_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class BeginDate_auto():
	"""Month and day year schedule begins"""


class Behaviors_auto():
	""""""


class HolidayDate_auto():
	"""Date of holiday modeled"""


class BiomassDensity_auto():
	"""Biomass of vegetation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Blind_auto():
	""""""

	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)



class BlowerDoorValue_auto():
	"""Leakage value obtained from blower door test."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Building_auto():
	""""""

	@property
	def buildingType(self):
		return self.get_attribute('buildingType')


	@buildingType.setter
	def buildingType(self,value):
		self.set_attribute('buildingType',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def StreetAddress(self):
		return self.get_child('StreetAddress')


	@property
	def StreetAddresss(self):
		return self.get_children('StreetAddress')


	def add_StreetAddress(self,
		):
		return self.add_child('StreetAddress',
			)


	@property
	def Area(self):
		return self.get_child('Area')


	@property
	def Areas(self):
		return self.get_children('Area')


	def add_Area(self,
		unit=None,
		):
		return self.add_child('Area',
			unit=unit,
			)


	@property
	def Space(self):
		return self.get_child('Space')


	@property
	def Spaces(self):
		return self.get_children('Space')


	def add_Space(self,
		id=None,
		spaceType=None,
		zoneIdRef=None,
		scheduleIdRef=None,
		lightScheduleIdRef=None,
		equipmentScheduleIdRef=None,
		peopleScheduleIdRef=None,
		conditionType=None,
		buildingStoreyIdRef=None,
		ifcGUID=None,
		):
		return self.add_child('Space',
			id=id,
			spaceType=spaceType,
			zoneIdRef=zoneIdRef,
			scheduleIdRef=scheduleIdRef,
			lightScheduleIdRef=lightScheduleIdRef,
			equipmentScheduleIdRef=equipmentScheduleIdRef,
			peopleScheduleIdRef=peopleScheduleIdRef,
			conditionType=conditionType,
			buildingStoreyIdRef=buildingStoreyIdRef,
			ifcGUID=ifcGUID,
			)


	@property
	def AverageNumberOfFloors(self):
		return self.get_child('AverageNumberOfFloors')


	@property
	def AverageNumberOfFloorss(self):
		return self.get_children('AverageNumberOfFloors')


	def add_AverageNumberOfFloors(self,
		):
		return self.add_child('AverageNumberOfFloors',
			)


	@property
	def InfiltrationFlow(self):
		return self.get_child('InfiltrationFlow')


	@property
	def InfiltrationFlows(self):
		return self.get_children('InfiltrationFlow')


	def add_InfiltrationFlow(self,
		type=None,
		programId=None,
		):
		return self.add_child('InfiltrationFlow',
			type=type,
			programId=programId,
			)


	@property
	def AnalysisParameter(self):
		return self.get_child('AnalysisParameter')


	@property
	def AnalysisParameters(self):
		return self.get_children('AnalysisParameter')


	def add_AnalysisParameter(self,
		parameterType=None,
		unit=None,
		):
		return self.add_child('AnalysisParameter',
			parameterType=parameterType,
			unit=unit,
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def SpaceBoundary(self):
		return self.get_child('SpaceBoundary')


	@property
	def SpaceBoundarys(self):
		return self.get_children('SpaceBoundary')


	def add_SpaceBoundary(self,
		ifcGUID=None,
		isSecondLevelBoundary=None,
		surfaceIdRef=None,
		oppositeIdRef=None,
		):
		return self.add_child('SpaceBoundary',
			ifcGUID=ifcGUID,
			isSecondLevelBoundary=isSecondLevelBoundary,
			surfaceIdRef=surfaceIdRef,
			oppositeIdRef=oppositeIdRef,
			)


	@property
	def Lighting(self):
		return self.get_child('Lighting')


	@property
	def Lightings(self):
		return self.get_children('Lighting')


	def add_Lighting(self,
		id=None,
		lightingSystemIdRef=None,
		lightingControlIdRef=None,
		meterIdRef=None,
		programId=None,
		):
		return self.add_child('Lighting',
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			lightingControlIdRef=lightingControlIdRef,
			meterIdRef=meterIdRef,
			programId=programId,
			)


	@property
	def IntEquipId(self):
		return self.get_child('IntEquipId')


	@property
	def IntEquipIds(self):
		return self.get_children('IntEquipId')


	def add_IntEquipId(self,
		intEquipIdRef=None,
		):
		return self.add_child('IntEquipId',
			intEquipIdRef=intEquipIdRef,
			)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)


	@property
	def PeakDomesticHotWaterFlow(self):
		return self.get_child('PeakDomesticHotWaterFlow')


	@property
	def PeakDomesticHotWaterFlows(self):
		return self.get_children('PeakDomesticHotWaterFlow')


	def add_PeakDomesticHotWaterFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		waterUseScheduleIdRef=None,
		programId=None,
		):
		return self.add_child('PeakDomesticHotWaterFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			waterUseScheduleIdRef=waterUseScheduleIdRef,
			programId=programId,
			)


	@property
	def BuildingStorey(self):
		return self.get_child('BuildingStorey')


	@property
	def BuildingStoreys(self):
		return self.get_children('BuildingStorey')


	def add_BuildingStorey(self,
		id=None,
		ifcGUID=None,
		):
		return self.add_child('BuildingStorey',
			id=id,
			ifcGUID=ifcGUID,
			)



class BuildingStorey_auto():
	"""Captures Building Storey Structure"""

	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Level(self):
		return self.get_child('Level')


	@property
	def Levels(self):
		return self.get_children('Level')


	def add_Level(self,
		unit=None,
		):
		return self.add_child('Level',
			unit=unit,
			)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)



class CADMaterialId_auto():
	""""""

	@property
	def CADMaterialIdRef(self):
		"""ID used by a CAD/BIM program to reference its internal materials library"""
		return self.get_attribute('CADMaterialIdRef')


	@CADMaterialIdRef.setter
	def CADMaterialIdRef(self,value):
		self.set_attribute('CADMaterialIdRef',value)



class CADModelAzimuth_auto():
	"""The number of degrees (0 to 360) of the angle of positive Y axis from north. (Value of the of Azimuth of Model's North relative to Cardinal North)"""


class CADModelId_auto():
	"""The CADModelId Element is used to map a CAD model or BIM to its corresponding gbXML file. Allows the CAD/BIM tool referenced by the programIdRef to correlate the gbXML file to its CAD/BIM model."""

	@property
	def programIdRef(self):
		"""ID reference to unique CAD/BIM program defined in DocumentHistory/ProgramInfo element."""
		return self.get_attribute('programIdRef')


	@programIdRef.setter
	def programIdRef(self,value):
		self.set_attribute('programIdRef',value)



class CADObjectId_auto():
	"""The CADObjectId Element is used to map unique CAD object identifiers to gbXML elements. Allows CAD/BIM tools to read results from a gbXML file and map them to their CAD objects."""

	@property
	def programIdRef(self):
		"""ID reference to unique CAD/BIM program defined in DocumentHistory/ProgramInfo element."""
		return self.get_attribute('programIdRef')


	@programIdRef.setter
	def programIdRef(self,value):
		self.set_attribute('programIdRef',value)



class ParameterValue_auto():
	""""""


class AnalysisParameter_auto():
	""""""

	@property
	def parameterType(self):
		return self.get_attribute('parameterType')


	@parameterType.setter
	def parameterType(self,value):
		self.set_attribute('parameterType',value)


	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ParameterValue(self):
		return self.get_child('ParameterValue')


	@property
	def ParameterValues(self):
		return self.get_children('ParameterValue')


	def add_ParameterValue(self,
		):
		return self.add_child('ParameterValue',
			)



class Campus_auto():
	"""The Campus element should be used as the base for all physical objects. On a campus, place one or more buildings."""

	@property
	def designHeatWeathIdRef(self):
		"""ID for the weather data used for a heating design day"""
		return self.get_attribute('designHeatWeathIdRef')


	@designHeatWeathIdRef.setter
	def designHeatWeathIdRef(self,value):
		self.set_attribute('designHeatWeathIdRef',value)


	@property
	def designCoolWeathIdRef(self):
		"""ID for the weather data used for a cooling design day"""
		return self.get_attribute('designCoolWeathIdRef')


	@designCoolWeathIdRef.setter
	def designCoolWeathIdRef(self,value):
		self.set_attribute('designCoolWeathIdRef',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Location(self):
		return self.get_child('Location')


	@property
	def Locations(self):
		return self.get_children('Location')


	def add_Location(self,
		):
		return self.add_child('Location',
			)


	@property
	def Building(self):
		return self.get_child('Building')


	@property
	def Buildings(self):
		return self.get_children('Building')


	def add_Building(self,
		id=None,
		buildingType=None,
		ifcGUID=None,
		):
		return self.add_child('Building',
			id=id,
			buildingType=buildingType,
			ifcGUID=ifcGUID,
			)


	@property
	def Surface(self):
		return self.get_child('Surface')


	@property
	def Surfaces(self):
		return self.get_children('Surface')


	def add_Surface(self,
		id=None,
		surfaceType=None,
		constructionIdRef=None,
		scheduleShadeIdRef=None,
		exposedToSun=None,
		ifcGUID=None,
		):
		return self.add_child('Surface',
			id=id,
			surfaceType=surfaceType,
			constructionIdRef=constructionIdRef,
			scheduleShadeIdRef=scheduleShadeIdRef,
			exposedToSun=exposedToSun,
			ifcGUID=ifcGUID,
			)


	@property
	def YearModeled(self):
		return self.get_child('YearModeled')


	@property
	def YearModeleds(self):
		return self.get_children('YearModeled')


	def add_YearModeled(self,
		):
		return self.add_child('YearModeled',
			)


	@property
	def DaylightSavings(self):
		return self.get_child('DaylightSavings')


	@property
	def DaylightSavingss(self):
		return self.get_children('DaylightSavings')


	def add_DaylightSavings(self,
		):
		return self.add_child('DaylightSavings',
			)


	@property
	def Life(self):
		return self.get_child('Life')


	@property
	def Lifes(self):
		return self.get_children('Life')


	def add_Life(self,
		unit=None,
		):
		return self.add_child('Life',
			unit=unit,
			)


	@property
	def AltEnergySource(self):
		return self.get_child('AltEnergySource')


	@property
	def AltEnergySources(self):
		return self.get_children('AltEnergySource')


	def add_AltEnergySource(self,
		id=None,
		altEnergyType=None,
		resourceType=None,
		programId=None,
		):
		return self.add_child('AltEnergySource',
			id=id,
			altEnergyType=altEnergyType,
			resourceType=resourceType,
			programId=programId,
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Vegetation(self):
		return self.get_child('Vegetation')


	@property
	def Vegetations(self):
		return self.get_children('Vegetation')


	def add_Vegetation(self,
		id=None,
		vegetationType=None,
		waterScheduleIdRef=None,
		waterMeterIdRef=None,
		shadeScheduleIdRef=None,
		programId=None,
		):
		return self.add_child('Vegetation',
			id=id,
			vegetationType=vegetationType,
			waterScheduleIdRef=waterScheduleIdRef,
			waterMeterIdRef=waterMeterIdRef,
			shadeScheduleIdRef=shadeScheduleIdRef,
			programId=programId,
			)


	@property
	def Transportation(self):
		return self.get_child('Transportation')


	@property
	def Transportations(self):
		return self.get_children('Transportation')


	def add_Transportation(self,
		id=None,
		transportationType=None,
		scheduleIdRef=None,
		programId=None,
		):
		return self.add_child('Transportation',
			id=id,
			transportationType=transportationType,
			scheduleIdRef=scheduleIdRef,
			programId=programId,
			)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)


	@property
	def ExtEquipId(self):
		return self.get_child('ExtEquipId')


	@property
	def ExtEquipIds(self):
		return self.get_children('ExtEquipId')


	def add_ExtEquipId(self,
		extEquipIdRef=None,
		):
		return self.add_child('ExtEquipId',
			extEquipIdRef=extEquipIdRef,
			)


	@property
	def Lighting(self):
		return self.get_child('Lighting')


	@property
	def Lightings(self):
		return self.get_children('Lighting')


	def add_Lighting(self,
		id=None,
		lightingSystemIdRef=None,
		lightingControlIdRef=None,
		meterIdRef=None,
		programId=None,
		):
		return self.add_child('Lighting',
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			lightingControlIdRef=lightingControlIdRef,
			meterIdRef=meterIdRef,
			programId=programId,
			)


	@property
	def LightControlId(self):
		return self.get_child('LightControlId')


	@property
	def LightControlIds(self):
		return self.get_children('LightControlId')


	def add_LightControlId(self,
		scheduleIdRef=None,
		):
		return self.add_child('LightControlId',
			scheduleIdRef=scheduleIdRef,
			)



class Capacity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def capacityType(self):
		return self.get_attribute('capacityType')


	@capacityType.setter
	def capacityType(self,value):
		self.set_attribute('capacityType',value)



class CartesianPoint_auto():
	"""This is the x, y, and z distances from the origin. This element must have three Coordinate elements when representing 3-d space, which represent x, y and z in order. This element must have two Coordinate elements when representing 2-d space.

				

			"""

	@property
	def Coordinate(self):
		return self.get_child('Coordinate')


	@property
	def Coordinates(self):
		return self.get_children('Coordinate')


	def add_Coordinate(self,
		):
		return self.add_child('Coordinate',
			)



class CDD_auto():
	"""Cooling degree days. CDD is calculated as the number of degrees a mean daily temperature is above a value (specified as the Temperature element), for each day. For example, if the mean temperature in a region rises to 77 degrees for three days during a year, the rest of the time staying below 75, and the Temperature element is set at 75, then CDD = 6."""

	@property
	def Temperature(self):
		return self.get_child('Temperature')


	@property
	def Temperatures(self):
		return self.get_children('Temperature')


	def add_Temperature(self,
		unit=None,
		programId=None,
		):
		return self.add_child('Temperature',
			unit=unit,
			programId=programId,
			)


	@property
	def CDDValue(self):
		return self.get_child('CDDValue')


	@property
	def CDDValues(self):
		return self.get_children('CDDValue')


	def add_CDDValue(self,
		):
		return self.add_child('CDDValue',
			)



class CDDValue_auto():
	"""Cooling degree day value"""


class City_auto():
	""""""


class ClosedShell_auto():
	"""This is an element from ifcXML that describes a collection of faces that make up a closed shell.

				

			"""

	@property
	def PolyLoop(self):
		return self.get_child('PolyLoop')


	@property
	def PolyLoops(self):
		return self.get_children('PolyLoop')


	def add_PolyLoop(self,
		):
		return self.add_child('PolyLoop',
			)



class CLTDParameters_auto():
	"""Parameters required by CLTD load calculation method, as described in the 1989 ASHRAE Handbook, Fundamentals volume, pages 26.32 and following. Ignore this element and all elements under it if you are not planning to use that method."""

	@property
	def roofASHRAENumber(self):
		"""Specifies the number 1 to 13 to use for a roof. See Table 29 page 26.34, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('roofASHRAENumber')


	@roofASHRAENumber.setter
	def roofASHRAENumber(self,value):
		self.set_attribute('roofASHRAENumber',value)


	@property
	def wallASHRAEGroup(self):
		"""Specifies the wall group code A to G to use for a wall. See Table 31, page 26.36, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('wallASHRAEGroup')


	@wallASHRAEGroup.setter
	def wallASHRAEGroup(self,value):
		self.set_attribute('wallASHRAEGroup',value)


	@property
	def roofColor(self):
		"""Specifies the effective roof color, which depends on the actual color and whether the location is industrial or rural. See page 26.34, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('roofColor')


	@roofColor.setter
	def roofColor(self,value):
		self.set_attribute('roofColor',value)


	@property
	def roofHasSuspendedCeiling(self):
		"""Specifies whether or not a roof has a suspended ceiling under it. See table 29, page 26.34, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('roofHasSuspendedCeiling')


	@roofHasSuspendedCeiling.setter
	def roofHasSuspendedCeiling(self,value):
		self.set_attribute('roofHasSuspendedCeiling',value)


	@property
	def wallColor(self):
		"""Specifies the effective wall color, which depends on the actual color and whether the location is industrial or rural. See page 26.36, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('wallColor')


	@wallColor.setter
	def wallColor(self,value):
		self.set_attribute('wallColor',value)



class CoefficientOfUtilization_auto():
	"""The coefficient of utilization is the ratio of luminous flux on a work plane to the luminous flux emitted by the lamps alone. """

	@property
	def wallReflectance(self):
		return self.get_attribute('wallReflectance')


	@wallReflectance.setter
	def wallReflectance(self,value):
		self.set_attribute('wallReflectance',value)


	@property
	def ceilingCavityReflectance(self):
		return self.get_attribute('ceilingCavityReflectance')


	@ceilingCavityReflectance.setter
	def ceilingCavityReflectance(self,value):
		self.set_attribute('ceilingCavityReflectance',value)


	@property
	def floorReflectance(self):
		return self.get_attribute('floorReflectance')


	@floorReflectance.setter
	def floorReflectance(self,value):
		self.set_attribute('floorReflectance',value)


	@property
	def roomCavityRatio(self):
		"""Room cavity ratio is a measure of the room cavity proportions."""
		return self.get_attribute('roomCavityRatio')


	@roomCavityRatio.setter
	def roomCavityRatio(self,value):
		self.set_attribute('roomCavityRatio',value)



class CompanyName_auto():
	""""""


class Conductivity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ConductivityFofT_auto():
	"""Conductivity as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Construction_auto():
	"""A Construction is a combination of layers, such as a wall or a roof"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def constructionIsSchematic(self):
		return self.get_attribute('constructionIsSchematic')


	@constructionIsSchematic.setter
	def constructionIsSchematic(self,value):
		self.set_attribute('constructionIsSchematic',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def U_value(self):
		return self.get_child('U-value')


	@property
	def U_values(self):
		return self.get_children('U-value')


	def add_U_value(self,
		unit=None,
		):
		return self.add_child('U-value',
			unit=unit,
			)


	@property
	def Absorptance(self):
		return self.get_child('Absorptance')


	@property
	def Absorptances(self):
		return self.get_children('Absorptance')


	def add_Absorptance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Absorptance',
			unit=unit,
			type=type,
			)


	@property
	def Roughness(self):
		return self.get_child('Roughness')


	@property
	def Roughnesss(self):
		return self.get_children('Roughness')


	def add_Roughness(self,
		value=None,
		):
		return self.add_child('Roughness',
			value=value,
			)


	@property
	def Albedo(self):
		return self.get_child('Albedo')


	@property
	def Albedos(self):
		return self.get_children('Albedo')


	def add_Albedo(self,
		unit=None,
		):
		return self.add_child('Albedo',
			unit=unit,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def PercentExisting(self):
		return self.get_child('PercentExisting')


	@property
	def PercentExistings(self):
		return self.get_children('PercentExisting')


	def add_PercentExisting(self,
		unit=None,
		):
		return self.add_child('PercentExisting',
			unit=unit,
			)


	@property
	def FireFace(self):
		return self.get_child('FireFace')


	@property
	def FireFaces(self):
		return self.get_children('FireFace')


	def add_FireFace(self,
		):
		return self.add_child('FireFace',
			)


	@property
	def LayerId(self):
		return self.get_child('LayerId')


	@property
	def LayerIds(self):
		return self.get_children('LayerId')


	def add_LayerId(self,
		layerIdRef=None,
		):
		return self.add_child('LayerId',
			layerIdRef=layerIdRef,
			)


	@property
	def ExtEquipId(self):
		return self.get_child('ExtEquipId')


	@property
	def ExtEquipIds(self):
		return self.get_children('ExtEquipId')


	def add_ExtEquipId(self,
		extEquipIdRef=None,
		):
		return self.add_child('ExtEquipId',
			extEquipIdRef=extEquipIdRef,
			)


	@property
	def LoadCalcInputParameters(self):
		return self.get_child('LoadCalcInputParameters')


	@property
	def LoadCalcInputParameterss(self):
		return self.get_children('LoadCalcInputParameters')


	def add_LoadCalcInputParameters(self,
		):
		return self.add_child('LoadCalcInputParameters',
			)



class Control_auto():
	"""The Control element should be used for describing how this equipment is controlled."""

	@property
	def controlType(self):
		return self.get_attribute('controlType')


	@controlType.setter
	def controlType(self,value):
		self.set_attribute('controlType',value)


	@property
	def stages(self):
		return self.get_attribute('stages')


	@stages.setter
	def stages(self,value):
		self.set_attribute('stages',value)


	@property
	def minPowerRatio(self):
		return self.get_attribute('minPowerRatio')


	@minPowerRatio.setter
	def minPowerRatio(self,value):
		self.set_attribute('minPowerRatio',value)


	@property
	def operationType(self):
		return self.get_attribute('operationType')


	@operationType.setter
	def operationType(self,value):
		self.set_attribute('operationType',value)


	@property
	def performanceIdRef(self):
		return self.get_attribute('performanceIdRef')


	@performanceIdRef.setter
	def performanceIdRef(self,value):
		self.set_attribute('performanceIdRef',value)



class ConvergenceLimits_auto():
	"""ConvergenceLimits is an optional element that can be used to specify timesteps on individual simulation loops.  It is generally reserved for EnergyPlus simulations, and is recommended for advanced users wishing to speed up calculations.  This may be a valid location to store this information if the gbXML file is used as a simulation archive."""

	@property
	def minimumSystemTimeStep(self):
		return self.get_attribute('minimumSystemTimeStep')


	@minimumSystemTimeStep.setter
	def minimumSystemTimeStep(self,value):
		self.set_attribute('minimumSystemTimeStep',value)


	@property
	def maximumHVACIterations(self):
		return self.get_attribute('maximumHVACIterations')


	@maximumHVACIterations.setter
	def maximumHVACIterations(self,value):
		self.set_attribute('maximumHVACIterations',value)


	@property
	def minimumPlantIterations(self):
		return self.get_attribute('minimumPlantIterations')


	@minimumPlantIterations.setter
	def minimumPlantIterations(self,value):
		self.set_attribute('minimumPlantIterations',value)


	@property
	def maximumPlantIterations(self):
		return self.get_attribute('maximumPlantIterations')


	@maximumPlantIterations.setter
	def maximumPlantIterations(self,value):
		self.set_attribute('maximumPlantIterations',value)



class CoolingCoilSetpointResetType_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class CoolingCoilType_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class CoolingSizingFactor_auto():
	""""""


class Coordinate_auto():
	"""This is the an x, y, or z length measurement from the origin.

				

			"""


class Cost_auto():
	""""""

	@property
	def costType(self):
		return self.get_attribute('costType')


	@costType.setter
	def costType(self,value):
		self.set_attribute('costType',value)


	@property
	def CostValue(self):
		return self.get_child('CostValue')


	@property
	def CostValues(self):
		return self.get_children('CostValue')


	def add_CostValue(self,
		currency=None,
		unit=None,
		):
		return self.add_child('CostValue',
			currency=currency,
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class CostValue_auto():
	""""""

	@property
	def currency(self):
		return self.get_attribute('currency')


	@currency.setter
	def currency(self,value):
		self.set_attribute('currency',value)


	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class CreatedBy_auto():
	"""Denotes the time this file has been created, as well as the person and program used to create this file."""

	@property
	def personId(self):
		return self.get_attribute('personId')


	@personId.setter
	def personId(self,value):
		self.set_attribute('personId',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def date(self):
		return self.get_attribute('date')


	@date.setter
	def date(self,value):
		self.set_attribute('date',value)


	@property
	def CADModelId(self):
		return self.get_child('CADModelId')


	@property
	def CADModelIds(self):
		return self.get_children('CADModelId')


	def add_CADModelId(self,
		programIdRef=None,
		):
		return self.add_child('CADModelId',
			programIdRef=programIdRef,
			)



class Country_auto():
	""""""


class CyclesPerWeek_auto():
	"""Number of operation cycles per week."""


class CyclingRateMax_auto():
	"""Maximum cycling rate (cycles/hr)"""


class DamperHeatingAction_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Data_auto():
	""""""

	@property
	def IndependentValue(self):
		return self.get_child('IndependentValue')


	@property
	def IndependentValues(self):
		return self.get_children('IndependentValue')


	def add_IndependentValue(self,
		):
		return self.add_child('IndependentValue',
			)


	@property
	def DependentValue(self):
		return self.get_child('DependentValue')


	@property
	def DependentValues(self):
		return self.get_children('DependentValue')


	def add_DependentValue(self,
		):
		return self.add_child('DependentValue',
			)



class Day_auto():
	""""""

	@property
	def dayScheduleIdRef(self):
		"""ID for operation schedules"""
		return self.get_attribute('dayScheduleIdRef')


	@dayScheduleIdRef.setter
	def dayScheduleIdRef(self,value):
		self.set_attribute('dayScheduleIdRef',value)


	@property
	def dayType(self):
		return self.get_attribute('dayType')


	@dayType.setter
	def dayType(self,value):
		self.set_attribute('dayType',value)



class DaylightSavings_auto():
	"""Allows for including daylight savings time"""


class DaySchedule_auto():
	"""Set of values that define the profile of one 24 hour period divided equally to the number of values entered."""

	@property
	def scheduleType(self):
		return self.get_attribute('scheduleType')


	@scheduleType.setter
	def scheduleType(self,value):
		self.set_attribute('scheduleType',value)


	@property
	def scheduleTypeLimitsId(self):
		return self.get_attribute('scheduleTypeLimitsId')


	@scheduleTypeLimitsId.setter
	def scheduleTypeLimitsId(self,value):
		self.set_attribute('scheduleTypeLimitsId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ScheduleValue(self):
		return self.get_child('ScheduleValue')


	@property
	def ScheduleValues(self):
		return self.get_children('ScheduleValue')


	def add_ScheduleValue(self,
		OutsideHighReset=None,
		OutsideLowReset=None,
		SupplyHighReset=None,
		SupplyLowReset=None,
		):
		return self.add_child('ScheduleValue',
			OutsideHighReset=OutsideHighReset,
			OutsideLowReset=OutsideLowReset,
			SupplyHighReset=SupplyHighReset,
			SupplyLowReset=SupplyLowReset,
			)



class DDDayCool_auto():
	"""Day of the month that the cooling design day occurs on"""


class DDDayHeat_auto():
	"""Day of the month that the heating design day occurs on"""


class DDDaylightCool_auto():
	"""Flag for daylight savings on the cooling design day"""


class DDDaylightHeat_auto():
	"""Flag for daylight savings for the heating design day"""


class DDDBCool_auto():
	"""Cooling design day dry bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBHeat_auto():
	"""Heating design day dry bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBRangeCool_auto():
	"""Cooling design day dry bulb temperature range"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBRangeHeat_auto():
	"""Heating design day dry bulb temperature range"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDGroundTCool_auto():
	"""Ground temperature on the cooling design day"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDGroundTHeat_auto():
	"""Ground temperature for the heating design day"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDHiHrCool_auto():
	"""Cooling design day hour of high temperature"""


class DDHiHrHeat_auto():
	"""Heating design day hour of high temperature"""


class DDLoHrCool_auto():
	"""Cooling design day hour of low temperature"""


class DDLoHrHeat_auto():
	"""Heating design day hour of low temperature"""


class DDMonthCool_auto():
	"""Month the cooling design day lands on. 1=Jan 12=Dec"""


class DDMonthHeat_auto():
	"""Month that the heating design day occurs on. 1=Jan 12=Dec"""


class DDPressureCool_auto():
	"""Cooling design day atmospheric pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDPressureHeat_auto():
	"""Heating design day atmospheric pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDRainCool_auto():
	"""Flag for rain on the cooling design day. 0=no rain 1=rain"""


class DDRainHeat_auto():
	"""Heating design day rain flag. 0=no rain, 1=rain"""


class DDSkyClearnessCool_auto():
	"""Cooling design day sky clearness"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDSkyClearnessHeat_auto():
	"""Heating design day sky clearness"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDSnowCool_auto():
	"""Flag for snow on the cooling design day. 0=not snowing 1=snowing"""


class DDSnowHeat_auto():
	"""Heating design day snow flag. 0=not snowing 1=snowing"""


class DDWBCool_auto():
	"""Cooling design day wet bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWBHeat_auto():
	"""Heating design day wet bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindDirCool_auto():
	"""Cooing design day wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindDirHeat_auto():
	"""Heating design day wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindSpeedCool_auto():
	"""Cooling design day wind speed"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindSpeedHeat_auto():
	"""Heating design day wind speed"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DeltaP_auto():
	"""Difference in pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def conditioningType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('conditioningType')


	@conditioningType.setter
	def conditioningType(self,value):
		self.set_attribute('conditioningType',value)


	@property
	def performanceId(self):
		"""Use this attribute to point to a performance curve if one is provided"""
		return self.get_attribute('performanceId')


	@performanceId.setter
	def performanceId(self,value):
		self.set_attribute('performanceId',value)



class DeltaT_auto():
	"""Difference in temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def conditioningType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('conditioningType')


	@conditioningType.setter
	def conditioningType(self,value):
		self.set_attribute('conditioningType',value)



class Density_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DensityFofT_auto():
	"""Density as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DependentValue_auto():
	"""Value of a dependent variable for this data point"""


class DependentVariable_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def minValue(self):
		"""Use minValue and maxValue to define constraints on the curve."""
		return self.get_attribute('minValue')


	@minValue.setter
	def minValue(self,value):
		self.set_attribute('minValue',value)


	@property
	def maxValue(self):
		return self.get_attribute('maxValue')


	@maxValue.setter
	def maxValue(self,value):
		self.set_attribute('maxValue',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)



class Description_auto():
	""""""


class CoefficientA_auto():
	""""""


class CoefficientB_auto():
	""""""


class CoefficientC_auto():
	""""""


class CoefficientD_auto():
	""""""


class Parameter1ID_auto():
	""""""


class Parameter2ID_auto():
	""""""


class Parameter3ID_auto():
	""""""


class Mean_auto():
	""""""


class StDev_auto():
	""""""


class LowerBound_auto():
	""""""


class UpperBound_auto():
	""""""


class DesignCoolRH_auto():
	"""Relative humidity set point for cooling."""


class DesignCoolT_auto():
	"""Design temperature for cooling"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class DesignFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class RecircFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignHeatRH_auto():
	"""Relative humidity set point for heating."""


class DesignHeatT_auto():
	"""Design temperature for heating"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class DesignPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Dimensions_auto():
	""""""

	@property
	def Height(self):
		return self.get_child('Height')


	@property
	def Heights(self):
		return self.get_children('Height')


	def add_Height(self,
		unit=None,
		):
		return self.add_child('Height',
			unit=unit,
			)


	@property
	def Width(self):
		return self.get_child('Width')


	@property
	def Widths(self):
		return self.get_children('Width')


	def add_Width(self,
		unit=None,
		):
		return self.add_child('Width',
			unit=unit,
			)


	@property
	def Length(self):
		return self.get_child('Length')


	@property
	def Lengths(self):
		return self.get_children('Length')


	def add_Length(self,
		unit=None,
		):
		return self.add_child('Length',
			unit=unit,
			)



class DocumentHistory_auto():
	"""Contains details about people and programs that created and modified this file"""

	@property
	def CreatedBy(self):
		return self.get_child('CreatedBy')


	@property
	def CreatedBys(self):
		return self.get_children('CreatedBy')


	def add_CreatedBy(self,
		personId=None,
		programId=None,
		date=None,
		):
		return self.add_child('CreatedBy',
			personId=personId,
			programId=programId,
			date=date,
			)


	@property
	def ProgramInfo(self):
		return self.get_child('ProgramInfo')


	@property
	def ProgramInfos(self):
		return self.get_children('ProgramInfo')


	def add_ProgramInfo(self,
		id=None,
		):
		return self.add_child('ProgramInfo',
			id=id,
			)


	@property
	def PersonInfo(self):
		return self.get_child('PersonInfo')


	@property
	def PersonInfos(self):
		return self.get_children('PersonInfo')


	def add_PersonInfo(self,
		id=None,
		):
		return self.add_child('PersonInfo',
			id=id,
			)


	@property
	def ModifiedBy(self):
		return self.get_child('ModifiedBy')


	@property
	def ModifiedBys(self):
		return self.get_children('ModifiedBy')


	def add_ModifiedBy(self,
		personId=None,
		programId=None,
		date=None,
		):
		return self.add_child('ModifiedBy',
			personId=personId,
			programId=programId,
			date=date,
			)



class Drivers_auto():
	"""Drivers are part of the DNAS framework and represent the environmental factors that stimulate occupants to fulfill a physical, physiological or psychological need."""


class EconomizerLockout_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Efficiency_auto():
	""""""

	@property
	def standardsType(self):
		"""Use the standardsType attribute when the efficiency is measured at standard conditions."""
		return self.get_attribute('standardsType')


	@standardsType.setter
	def standardsType(self,value):
		self.set_attribute('standardsType',value)


	@property
	def efficiencyType(self):
		return self.get_attribute('efficiencyType')


	@efficiencyType.setter
	def efficiencyType(self,value):
		self.set_attribute('efficiencyType',value)


	@property
	def operationType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('operationType')


	@operationType.setter
	def operationType(self,value):
		self.set_attribute('operationType',value)


	@property
	def performanceId(self):
		"""Use this attribute to point to a performance curve if one is provided"""
		return self.get_attribute('performanceId')


	@performanceId.setter
	def performanceId(self,value):
		self.set_attribute('performanceId',value)



class ElecLoad_auto():
	"""Electric load"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Elevation_auto():
	"""Height above sea level"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Email1Address_auto():
	""""""


class EmissionRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Emittance_auto():
	"""Infra-red emissivity"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def surfaceType(self):
		return self.get_attribute('surfaceType')


	@surfaceType.setter
	def surfaceType(self,value):
		self.set_attribute('surfaceType',value)



class EndDate_auto():
	"""Month and day year schedule ends"""


class Energy_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def valueType(self):
		return self.get_attribute('valueType')


	@valueType.setter
	def valueType(self,value):
		self.set_attribute('valueType',value)


	@property
	def timePeriod(self):
		return self.get_attribute('timePeriod')


	@timePeriod.setter
	def timePeriod(self,value):
		self.set_attribute('timePeriod',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class Enthalpy_auto():
	"""Minimum enthalpy setpoint for air-side economizer."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def enthalpyType(self):
		return self.get_attribute('enthalpyType')


	@enthalpyType.setter
	def enthalpyType(self,value):
		self.set_attribute('enthalpyType',value)



class Parameter_auto():
	"""Driving parameters can be set. Units of parameters are SI: degree C, ppm, lux, W/m2."""

	@property
	def ID(self):
		return self.get_attribute('ID')


	@ID.setter
	def ID(self,value):
		self.set_attribute('ID',value)


	@property
	def Name(self):
		return self.get_attribute('Name')


	@Name.setter
	def Name(self,value):
		self.set_attribute('Name',value)


	@property
	def IfcGuid(self):
		return self.get_attribute('IfcGuid')


	@IfcGuid.setter
	def IfcGuid(self,value):
		self.set_attribute('IfcGuid',value)



class Environment_auto():
	"""Environmental driver parameters can be defined."""


class RoomEventType_auto():
	"""Events can be defined that are possible to happen in the building"""


class Equation_auto():
	"""The Equation element allows data for n-dimensional algebraic data to be entered. The Expression element should contain an dependent variable followed by an = sign and an equation containing independent variables. The independent and dependent variables are then defined by their respective tags. The only mathematical operations allowed are ^ (power), + (addition), - (subtraction), / (division), and * (multiplication). Example: z=x+2*y^2 would have an DependentVariable with a name = z, and two IndependentVariable(s) with names of x and y. Descriptions would be included for each variable, along with unit and dataType information identifying the variable and its role. """

	@property
	def Expression(self):
		return self.get_child('Expression')


	@property
	def Expressions(self):
		return self.get_children('Expression')


	def add_Expression(self,
		):
		return self.add_child('Expression',
			)


	@property
	def IndependentVariable(self):
		return self.get_child('IndependentVariable')


	@property
	def IndependentVariables(self):
		return self.get_children('IndependentVariable')


	def add_IndependentVariable(self,
		unit=None,
		dataType=None,
		):
		return self.add_child('IndependentVariable',
			unit=unit,
			dataType=dataType,
			)


	@property
	def DependentVariable(self):
		return self.get_child('DependentVariable')


	@property
	def DependentVariables(self):
		return self.get_children('DependentVariable')


	def add_DependentVariable(self,
		unit=None,
		dataType=None,
		minValue=None,
		maxValue=None,
		):
		return self.add_child('DependentVariable',
			unit=unit,
			dataType=dataType,
			minValue=minValue,
			maxValue=maxValue,
			)



class EquipPowerPerArea_auto():
	"""Amount of power used by equipment in a given area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class Expression_auto():
	""""""


class ExtEquip_auto():
	"""External equipment. This is generalized to be able to contain any type of external equipment."""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def waterTempScheduleIdRef(self):
		return self.get_attribute('waterTempScheduleIdRef')


	@waterTempScheduleIdRef.setter
	def waterTempScheduleIdRef(self,value):
		self.set_attribute('waterTempScheduleIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def ElecLoad(self):
		return self.get_child('ElecLoad')


	@property
	def ElecLoads(self):
		return self.get_children('ElecLoad')


	def add_ElecLoad(self,
		unit=None,
		):
		return self.add_child('ElecLoad',
			unit=unit,
			)


	@property
	def FuelLoad(self):
		return self.get_child('FuelLoad')


	@property
	def FuelLoads(self):
		return self.get_children('FuelLoad')


	def add_FuelLoad(self,
		unit=None,
		):
		return self.add_child('FuelLoad',
			unit=unit,
			)


	@property
	def LatentLoad(self):
		return self.get_child('LatentLoad')


	@property
	def LatentLoads(self):
		return self.get_children('LatentLoad')


	def add_LatentLoad(self,
		unit=None,
		):
		return self.add_child('LatentLoad',
			unit=unit,
			)


	@property
	def WindSpeed(self):
		return self.get_child('WindSpeed')


	@property
	def WindSpeeds(self):
		return self.get_children('WindSpeed')


	def add_WindSpeed(self,
		unit=None,
		type=None,
		):
		return self.add_child('WindSpeed',
			unit=unit,
			type=type,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def WasteWaterHREff(self):
		return self.get_child('WasteWaterHREff')


	@property
	def WasteWaterHREffs(self):
		return self.get_children('WasteWaterHREff')


	def add_WasteWaterHREff(self,
		unit=None,
		airLoopIdRef=None,
		hydronicLoopIdRef=None,
		):
		return self.add_child('WasteWaterHREff',
			unit=unit,
			airLoopIdRef=airLoopIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			)


	@property
	def WaterUsePerCycle(self):
		return self.get_child('WaterUsePerCycle')


	@property
	def WaterUsePerCycles(self):
		return self.get_children('WaterUsePerCycle')


	def add_WaterUsePerCycle(self,
		unit=None,
		):
		return self.add_child('WaterUsePerCycle',
			unit=unit,
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def CyclesPerWeek(self):
		return self.get_child('CyclesPerWeek')


	@property
	def CyclesPerWeeks(self):
		return self.get_children('CyclesPerWeek')


	def add_CyclesPerWeek(self,
		):
		return self.add_child('CyclesPerWeek',
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def Age(self):
		return self.get_child('Age')


	@property
	def Ages(self):
		return self.get_children('Age')


	def add_Age(self,
		unit=None,
		):
		return self.add_child('Age',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class ExtEquipId_auto():
	""""""

	@property
	def extEquipIdRef(self):
		return self.get_attribute('extEquipIdRef')


	@extEquipIdRef.setter
	def extEquipIdRef(self,value):
		self.set_attribute('extEquipIdRef',value)



class FamilyName_auto():
	""""""


class FileName_auto():
	""""""


class Fire_auto():
	"""Properties of a material under fire conditions."""

	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def Density(self):
		return self.get_child('Density')


	@property
	def Densitys(self):
		return self.get_children('Density')


	def add_Density(self,
		unit=None,
		):
		return self.add_child('Density',
			unit=unit,
			)


	@property
	def SpecificHeat(self):
		return self.get_child('SpecificHeat')


	@property
	def SpecificHeats(self):
		return self.get_children('SpecificHeat')


	def add_SpecificHeat(self,
		unit=None,
		):
		return self.add_child('SpecificHeat',
			unit=unit,
			)



class FireFace_auto():
	"""Properties of a construction under fire conditions."""

	@property
	def Absorptance(self):
		return self.get_child('Absorptance')


	@property
	def Absorptances(self):
		return self.get_children('Absorptance')


	def add_Absorptance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Absorptance',
			unit=unit,
			type=type,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)



class FirstName_auto():
	""""""


class Address1_auto():
	""""""


class Address2_auto():
	""""""


class State_auto():
	""""""


class ZipCode_auto():
	""""""


class PhoneNumber_auto():
	""""""


class FloorSlabHeatLossCoefficient_auto():
	"""Specifies the heat loss from a floor in terms of the amount of heat lost per length of exposed perimeter. Used with both commercial and residential load calculation methods."""

	@property
	def floorSlabPerimeterHeatLossCoefficientUnitTypeEnum(self):
		return self.get_attribute('floorSlabPerimeterHeatLossCoefficientUnitTypeEnum')


	@floorSlabPerimeterHeatLossCoefficientUnitTypeEnum.setter
	def floorSlabPerimeterHeatLossCoefficientUnitTypeEnum(self,value):
		self.set_attribute('floorSlabPerimeterHeatLossCoefficientUnitTypeEnum',value)



class Flow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class FlowControl_auto():
	"""Use this element to describe how the fluid flow is controlled. The temperatures specified in this element should be measured just upstream of the chiller."""

	@property
	def processScheduleId(self):
		return self.get_attribute('processScheduleId')


	@processScheduleId.setter
	def processScheduleId(self,value):
		self.set_attribute('processScheduleId',value)


	@property
	def DesignFlow(self):
		return self.get_child('DesignFlow')


	@property
	def DesignFlows(self):
		return self.get_children('DesignFlow')


	def add_DesignFlow(self,
		unit=None,
		):
		return self.add_child('DesignFlow',
			unit=unit,
			)


	@property
	def MinimumFlow(self):
		return self.get_child('MinimumFlow')


	@property
	def MinimumFlows(self):
		return self.get_children('MinimumFlow')


	def add_MinimumFlow(self,
		unit=None,
		):
		return self.add_child('MinimumFlow',
			unit=unit,
			)


	@property
	def MaximumFlow(self):
		return self.get_child('MaximumFlow')


	@property
	def MaximumFlows(self):
		return self.get_children('MaximumFlow')


	def add_MaximumFlow(self,
		unit=None,
		):
		return self.add_child('MaximumFlow',
			unit=unit,
			)


	@property
	def RecircFlow(self):
		return self.get_child('RecircFlow')


	@property
	def RecircFlows(self):
		return self.get_children('RecircFlow')


	def add_RecircFlow(self,
		unit=None,
		):
		return self.add_child('RecircFlow',
			unit=unit,
			)



class FlowPerArea_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class FlowPerPerson_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class FlowType_auto():
	""""""

	@property
	def flowType(self):
		return self.get_attribute('flowType')


	@flowType.setter
	def flowType(self,value):
		self.set_attribute('flowType',value)



class FractionOnCyclePowerUse_auto():
	"""Fraction of on-cycle power use"""


class Frame_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Width(self):
		return self.get_child('Width')


	@property
	def Widths(self):
		return self.get_children('Width')


	def add_Width(self,
		unit=None,
		):
		return self.add_child('Width',
			unit=unit,
			)



class FuelLoad_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Gap_auto():
	"""Space between window panes"""

	@property
	def gas(self):
		return self.get_attribute('gas')


	@gas.setter
	def gas(self,value):
		self.set_attribute('gas',value)


	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Density(self):
		return self.get_child('Density')


	@property
	def Densitys(self):
		return self.get_children('Density')


	def add_Density(self,
		unit=None,
		):
		return self.add_child('Density',
			unit=unit,
			)


	@property
	def DensityFofT(self):
		return self.get_child('DensityFofT')


	@property
	def DensityFofTs(self):
		return self.get_children('DensityFofT')


	def add_DensityFofT(self,
		unit=None,
		):
		return self.add_child('DensityFofT',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def ConductivityFofT(self):
		return self.get_child('ConductivityFofT')


	@property
	def ConductivityFofTs(self):
		return self.get_children('ConductivityFofT')


	def add_ConductivityFofT(self,
		unit=None,
		):
		return self.add_child('ConductivityFofT',
			unit=unit,
			)


	@property
	def Viscosity(self):
		return self.get_child('Viscosity')


	@property
	def Viscositys(self):
		return self.get_children('Viscosity')


	def add_Viscosity(self,
		unit=None,
		):
		return self.add_child('Viscosity',
			unit=unit,
			)


	@property
	def ViscosityFofT(self):
		return self.get_child('ViscosityFofT')


	@property
	def ViscosityFofTs(self):
		return self.get_children('ViscosityFofT')


	def add_ViscosityFofT(self,
		unit=None,
		):
		return self.add_child('ViscosityFofT',
			unit=unit,
			)


	@property
	def PrandtlNumber(self):
		return self.get_child('PrandtlNumber')


	@property
	def PrandtlNumbers(self):
		return self.get_children('PrandtlNumber')


	def add_PrandtlNumber(self,
		):
		return self.add_child('PrandtlNumber',
			)


	@property
	def PrandtlNumberFofT(self):
		return self.get_child('PrandtlNumberFofT')


	@property
	def PrandtlNumberFofTs(self):
		return self.get_children('PrandtlNumberFofT')


	def add_PrandtlNumberFofT(self,
		unit=None,
		):
		return self.add_child('PrandtlNumberFofT',
			unit=unit,
			)



class GapId_auto():
	""""""

	@property
	def gapIdRef(self):
		"""ID for a gap between window panes"""
		return self.get_attribute('gapIdRef')


	@gapIdRef.setter
	def gapIdRef(self,value):
		self.set_attribute('gapIdRef',value)



class GasPreheatCoilEfficiency_auto():
	"""Gas preheat coil efficiency"""


class GasPreheatCoilParasiticElectricLoad_auto():
	"""Gas Preheat Coil Parasitic Electric Load"""


class GeneralGeometry_auto():
	"""This element has been left open for use with other geometry definitions, such as X3D or BLISXML."""


class Glare_auto():
	"""Minimum amount of glare to trigger the shades to close"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Glaze_auto():
	"""Properties of one layer of a window"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class GlazeConductivity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class GlazeId_auto():
	""""""

	@property
	def glazeIdRef(self):
		"""ID indicating the type of glaze used"""
		return self.get_attribute('glazeIdRef')


	@glazeIdRef.setter
	def glazeIdRef(self,value):
		self.set_attribute('glazeIdRef',value)



class GroundTemp_auto():
	"""Monthly ground temperatures, 12 values"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class GroundTempValue_auto():
	""""""


class GUID_auto():
	""""""

	@property
	def entity(self):
		return self.get_attribute('entity')


	@entity.setter
	def entity(self,value):
		self.set_attribute('entity',value)



class GroupPriority_auto():
	"""A method can be defined how the decision is made if there are multiple people in the space. """


class HDD_auto():
	"""Heating degree days. HDD is calculated as the number of degrees a mean daily temperature is below a value (specified as the Temperature element), for each day. For example, if the mean temperature in a region drops to 64 degrees for four days during a year, the rest of the time staying above 65, and the Temperature element is set at 65, then HDD = 4."""

	@property
	def Temperature(self):
		return self.get_child('Temperature')


	@property
	def Temperatures(self):
		return self.get_children('Temperature')


	def add_Temperature(self,
		unit=None,
		programId=None,
		):
		return self.add_child('Temperature',
			unit=unit,
			programId=programId,
			)


	@property
	def HDDValue(self):
		return self.get_child('HDDValue')


	@property
	def HDDValues(self):
		return self.get_children('HDDValue')


	def add_HDDValue(self,
		):
		return self.add_child('HDDValue',
			)



class HDDValue_auto():
	""""""


class HeatingCoilSetpointResetType_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HeatingSizingFactor_auto():
	""""""


class HeatPumpDefrostControl_auto():
	""""""

	@property
	def defrostControlType(self):
		return self.get_attribute('defrostControlType')


	@defrostControlType.setter
	def defrostControlType(self,value):
		self.set_attribute('defrostControlType',value)



class HeatPumpDefrostStrategy_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HeatPumpFanDelayTime_auto():
	"""Heat pump fan delay time (s)"""


class HeatPumpTimeConstant_auto():
	"""Heat pump time constant (s)"""


class HeatRecoveryType_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Height_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HighLimit_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HighValue_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HorizontalSolar_auto():
	"""Amount of horizontal solar radiation striking the opening before a shade is closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HOutside_auto():
	"""h (Outside) is the combined coefficient of heat transfer by long-wave radiation and convection at outer surface, Btu/h-sf-F. See 2001 HoF Chapter 25 Table 1."""

	@property
	def hOutsideUnitTypeEnum(self):
		"""Used by the hOutsideUnitType attribute."""
		return self.get_attribute('hOutsideUnitTypeEnum')


	@hOutsideUnitTypeEnum.setter
	def hOutsideUnitTypeEnum(self,value):
		self.set_attribute('hOutsideUnitTypeEnum',value)



class HydronicLoop_auto():
	"""The HydronicLoop element represents the equipment serving one path of water, or other liquid"""

	@property
	def loopType(self):
		return self.get_attribute('loopType')


	@loopType.setter
	def loopType(self,value):
		self.set_attribute('loopType',value)


	@property
	def controlZoneIdRef(self):
		return self.get_attribute('controlZoneIdRef')


	@controlZoneIdRef.setter
	def controlZoneIdRef(self,value):
		self.set_attribute('controlZoneIdRef',value)


	@property
	def primaryLoopId(self):
		return self.get_attribute('primaryLoopId')


	@primaryLoopId.setter
	def primaryLoopId(self,value):
		self.set_attribute('primaryLoopId',value)


	@property
	def fluidType(self):
		return self.get_attribute('fluidType')


	@fluidType.setter
	def fluidType(self,value):
		self.set_attribute('fluidType',value)


	@property
	def chillerType(self):
		return self.get_attribute('chillerType')


	@chillerType.setter
	def chillerType(self,value):
		self.set_attribute('chillerType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def HydronicLoopEquipment(self):
		return self.get_child('HydronicLoopEquipment')


	@property
	def HydronicLoopEquipments(self):
		return self.get_children('HydronicLoopEquipment')


	def add_HydronicLoopEquipment(self,
		id=None,
		equipmentType=None,
		waterMeterIdRef=None,
		waterScheduleIdRef=None,
		primaryLoopId=None,
		programId=None,
		):
		return self.add_child('HydronicLoopEquipment',
			id=id,
			equipmentType=equipmentType,
			waterMeterIdRef=waterMeterIdRef,
			waterScheduleIdRef=waterScheduleIdRef,
			primaryLoopId=primaryLoopId,
			programId=programId,
			)


	@property
	def FlowControl(self):
		return self.get_child('FlowControl')


	@property
	def FlowControls(self):
		return self.get_children('FlowControl')


	def add_FlowControl(self,
		processScheduleId=None,
		):
		return self.add_child('FlowControl',
			processScheduleId=processScheduleId,
			)


	@property
	def TemperatureControl(self):
		return self.get_child('TemperatureControl')


	@property
	def TemperatureControls(self):
		return self.get_children('TemperatureControl')


	def add_TemperatureControl(self,
		):
		return self.add_child('TemperatureControl',
			)


	@property
	def DesignCoolT(self):
		return self.get_child('DesignCoolT')


	@property
	def DesignCoolTs(self):
		return self.get_children('DesignCoolT')


	def add_DesignCoolT(self,
		unit=None,
		programId=None,
		):
		return self.add_child('DesignCoolT',
			unit=unit,
			programId=programId,
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		coilType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			coilType=coilType,
			)


	@property
	def AnalysisParameter(self):
		return self.get_child('AnalysisParameter')


	@property
	def AnalysisParameters(self):
		return self.get_children('AnalysisParameter')


	def add_AnalysisParameter(self,
		parameterType=None,
		unit=None,
		):
		return self.add_child('AnalysisParameter',
			parameterType=parameterType,
			unit=unit,
			)



class HydronicLoopEquipment_auto():
	"""A piece of equipment serving a hydronic loop (most commonly a water loop). This is generalized to be able to contain any type of hydronic loop equipment."""

	@property
	def equipmentType(self):
		return self.get_attribute('equipmentType')


	@equipmentType.setter
	def equipmentType(self,value):
		self.set_attribute('equipmentType',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def primaryLoopId(self):
		return self.get_attribute('primaryLoopId')


	@primaryLoopId.setter
	def primaryLoopId(self,value):
		self.set_attribute('primaryLoopId',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def OperationSchedule(self):
		return self.get_child('OperationSchedule')


	@property
	def OperationSchedules(self):
		return self.get_children('OperationSchedule')


	def add_OperationSchedule(self,
		scheduleIdRef=None,
		):
		return self.add_child('OperationSchedule',
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def Temp(self):
		return self.get_child('Temp')


	@property
	def Temps(self):
		return self.get_children('Temp')


	def add_Temp(self,
		unit=None,
		tempType=None,
		):
		return self.add_child('Temp',
			unit=unit,
			tempType=tempType,
			)


	@property
	def ResetTemperature(self):
		return self.get_child('ResetTemperature')


	@property
	def ResetTemperatures(self):
		return self.get_children('ResetTemperature')


	def add_ResetTemperature(self,
		unit=None,
		type=None,
		resetSchedIdRef=None,
		):
		return self.add_child('ResetTemperature',
			unit=unit,
			type=type,
			resetSchedIdRef=resetSchedIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		coilType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			coilType=coilType,
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def MinFlow(self):
		return self.get_child('MinFlow')


	@property
	def MinFlows(self):
		return self.get_children('MinFlow')


	def add_MinFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('MinFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def DeltaT(self):
		return self.get_child('DeltaT')


	@property
	def DeltaTs(self):
		return self.get_children('DeltaT')


	def add_DeltaT(self,
		unit=None,
		conditioningType=None,
		):
		return self.add_child('DeltaT',
			unit=unit,
			conditioningType=conditioningType,
			)


	@property
	def DeltaP(self):
		return self.get_child('DeltaP')


	@property
	def DeltaPs(self):
		return self.get_children('DeltaP')


	def add_DeltaP(self,
		unit=None,
		hydronicLoopType=None,
		hydronicLoopIdRef=None,
		conditioningType=None,
		performanceId=None,
		):
		return self.add_child('DeltaP',
			unit=unit,
			hydronicLoopType=hydronicLoopType,
			hydronicLoopIdRef=hydronicLoopIdRef,
			conditioningType=conditioningType,
			performanceId=performanceId,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def Capacity(self):
		return self.get_child('Capacity')


	@property
	def Capacitys(self):
		return self.get_children('Capacity')


	def add_Capacity(self,
		unit=None,
		capacityType=None,
		):
		return self.add_child('Capacity',
			unit=unit,
			capacityType=capacityType,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Control(self):
		return self.get_child('Control')


	@property
	def Controls(self):
		return self.get_children('Control')


	def add_Control(self,
		controlType=None,
		stages=None,
		minPowerRatio=None,
		operationType=None,
		performanceIdRef=None,
		):
		return self.add_child('Control',
			controlType=controlType,
			stages=stages,
			minPowerRatio=minPowerRatio,
			operationType=operationType,
			performanceIdRef=performanceIdRef,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def Life(self):
		return self.get_child('Life')


	@property
	def Lifes(self):
		return self.get_children('Life')


	def add_Life(self,
		unit=None,
		):
		return self.add_child('Life',
			unit=unit,
			)


	@property
	def RefrigerantType(self):
		return self.get_child('RefrigerantType')


	@property
	def RefrigerantTypes(self):
		return self.get_children('RefrigerantType')


	def add_RefrigerantType(self,
		):
		return self.add_child('RefrigerantType',
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def Age(self):
		return self.get_child('Age')


	@property
	def Ages(self):
		return self.get_children('Age')


	def add_Age(self,
		unit=None,
		):
		return self.add_child('Age',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)



class HydronicLoopEquipmentId_auto():
	""""""

	@property
	def hydronicLoopEquipIdRef(self):
		"""ID pointing at a hydronic loop equipment object"""
		return self.get_attribute('hydronicLoopEquipIdRef')


	@hydronicLoopEquipIdRef.setter
	def hydronicLoopEquipIdRef(self,value):
		self.set_attribute('hydronicLoopEquipIdRef',value)



class HydronicLoopId_auto():
	""""""

	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		"""Type of hydronic loop """
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)


	@property
	def coilType(self):
		"""The type of coil for the hydronic loop."""
		return self.get_attribute('coilType')


	@coilType.setter
	def coilType(self,value):
		self.set_attribute('coilType',value)



class Illuminance_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ImageTexture_auto():
	"""This is an X3D element to map a texture to this material. From X3D specification: The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry. Texture maps are defined in a 2D coordinate system (s, t) that ranges from [0.0, 1.0] in both directions. The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. """

	@property
	def url(self):
		"""Specifies location of the image. From X3D specification: The texture is read from the URL specified by the url field. When the url field contains no values, texturing is disabled. Browsers shall support the JPEG and PNG image file formats. In addition, browsers may support other image formats (e.g. CGM) which can be rendered into a 2D image. Support for the GIF format is also recommended (including transparency). """
		return self.get_attribute('url')


	@url.setter
	def url(self,value):
		self.set_attribute('url',value)


	@property
	def repeatS(self):
		"""From X3D specification: If repeatS is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the S direction so that it fills the shape. If repeatS is FALSE, the texture coordinates are clamped in the S direction to lie within the [0.0, 1.0] range. """
		return self.get_attribute('repeatS')


	@repeatS.setter
	def repeatS(self,value):
		self.set_attribute('repeatS',value)


	@property
	def repeatT(self):
		"""From X3D specification: If repeatT is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the T direction so that it fills the shape. If repeatT is FALSE, the texture coordinates are clamped in the T direction to lie within the [0.0, 1.0] range. """
		return self.get_attribute('repeatT')


	@repeatT.setter
	def repeatT(self,value):
		self.set_attribute('repeatT',value)



class IndependentValue_auto():
	"""Value of the independent variable for this data point"""


class IndependentVariable_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)



class IndoorAirQuality_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def EmissionRate(self):
		return self.get_child('EmissionRate')


	@property
	def EmissionRates(self):
		return self.get_children('EmissionRate')


	def add_EmissionRate(self,
		unit=None,
		):
		return self.add_child('EmissionRate',
			unit=unit,
			)


	@property
	def SinkRate(self):
		return self.get_child('SinkRate')


	@property
	def SinkRates(self):
		return self.get_children('SinkRate')


	def add_SinkRate(self,
		unit=None,
		):
		return self.add_child('SinkRate',
			unit=unit,
			)


	@property
	def HighLimit(self):
		return self.get_child('HighLimit')


	@property
	def HighLimits(self):
		return self.get_children('HighLimit')


	def add_HighLimit(self,
		unit=None,
		):
		return self.add_child('HighLimit',
			unit=unit,
			)



class InfiltrationFlow_auto():
	"""Flow of air through building envelope"""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def BlowerDoorValue(self):
		return self.get_child('BlowerDoorValue')


	@property
	def BlowerDoorValues(self):
		return self.get_children('BlowerDoorValue')


	def add_BlowerDoorValue(self,
		unit=None,
		):
		return self.add_child('BlowerDoorValue',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class InputWatts_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class InsideAirFilmResistance_auto():
	"""Thermal resistance of the internal air film in a layer"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class IntEquip_auto():
	"""Interior equipment. This is generalized to be able to contain any type of internal equipment."""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def waterTempScheduleIdRef(self):
		return self.get_attribute('waterTempScheduleIdRef')


	@waterTempScheduleIdRef.setter
	def waterTempScheduleIdRef(self,value):
		self.set_attribute('waterTempScheduleIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def ElecLoad(self):
		return self.get_child('ElecLoad')


	@property
	def ElecLoads(self):
		return self.get_children('ElecLoad')


	def add_ElecLoad(self,
		unit=None,
		):
		return self.add_child('ElecLoad',
			unit=unit,
			)


	@property
	def FuelLoad(self):
		return self.get_child('FuelLoad')


	@property
	def FuelLoads(self):
		return self.get_children('FuelLoad')


	def add_FuelLoad(self,
		unit=None,
		):
		return self.add_child('FuelLoad',
			unit=unit,
			)


	@property
	def LatentLoad(self):
		return self.get_child('LatentLoad')


	@property
	def LatentLoads(self):
		return self.get_children('LatentLoad')


	def add_LatentLoad(self,
		unit=None,
		):
		return self.add_child('LatentLoad',
			unit=unit,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def WasteWaterHREff(self):
		return self.get_child('WasteWaterHREff')


	@property
	def WasteWaterHREffs(self):
		return self.get_children('WasteWaterHREff')


	def add_WasteWaterHREff(self,
		unit=None,
		airLoopIdRef=None,
		hydronicLoopIdRef=None,
		):
		return self.add_child('WasteWaterHREff',
			unit=unit,
			airLoopIdRef=airLoopIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			)


	@property
	def WaterUsePerCycle(self):
		return self.get_child('WaterUsePerCycle')


	@property
	def WaterUsePerCycles(self):
		return self.get_children('WaterUsePerCycle')


	def add_WaterUsePerCycle(self,
		unit=None,
		):
		return self.add_child('WaterUsePerCycle',
			unit=unit,
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def HeatRejectedtoSpace(self):
		return self.get_child('HeatRejectedtoSpace')


	@property
	def HeatRejectedtoSpaces(self):
		return self.get_children('HeatRejectedtoSpace')


	def add_HeatRejectedtoSpace(self,
		unit=None,
		):
		return self.add_child('HeatRejectedtoSpace',
			unit=unit,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def CyclesPerWeek(self):
		return self.get_child('CyclesPerWeek')


	@property
	def CyclesPerWeeks(self):
		return self.get_children('CyclesPerWeek')


	def add_CyclesPerWeek(self,
		):
		return self.add_child('CyclesPerWeek',
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def Age(self):
		return self.get_child('Age')


	@property
	def Ages(self):
		return self.get_children('Age')


	def add_Age(self,
		unit=None,
		):
		return self.add_child('Age',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class IntEquipId_auto():
	""""""

	@property
	def intEquipIdRef(self):
		"""ID pointing at an interior equipment object"""
		return self.get_attribute('intEquipIdRef')


	@intEquipIdRef.setter
	def intEquipIdRef(self,value):
		self.set_attribute('intEquipIdRef',value)



class Lamp_auto():
	"""Type of lamp used"""


class LastName_auto():
	""""""


class LatentHeatRecoveryEffectiveness_auto():
	""""""


class LatentLoad_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Latitude_auto():
	"""Degrees north of the equator, in decimal degrees. Locations south of the equator are negative."""


class Layer_auto():
	"""A Layer is a description of a material in a composite construction.  Its id attribute is referenced in the Contstruction element's LayerId """

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def InsideAirFilmResistance(self):
		return self.get_child('InsideAirFilmResistance')


	@property
	def InsideAirFilmResistances(self):
		return self.get_children('InsideAirFilmResistance')


	def add_InsideAirFilmResistance(self,
		unit=None,
		):
		return self.add_child('InsideAirFilmResistance',
			unit=unit,
			)


	@property
	def MaterialId(self):
		return self.get_child('MaterialId')


	@property
	def MaterialIds(self):
		return self.get_children('MaterialId')


	def add_MaterialId(self,
		materialIdRef=None,
		percentOfLayer=None,
		):
		return self.add_child('MaterialId',
			materialIdRef=materialIdRef,
			percentOfLayer=percentOfLayer,
			)


	@property
	def HOutside(self):
		return self.get_child('HOutside')


	@property
	def HOutsides(self):
		return self.get_children('HOutside')


	def add_HOutside(self,
		hOutsideUnitTypeEnum=None,
		):
		return self.add_child('HOutside',
			hOutsideUnitTypeEnum=hOutsideUnitTypeEnum,
			)



class LayerId_auto():
	""""""

	@property
	def layerIdRef(self):
		"""ID identifying a layer in this construction. Multiple layers in Constructions are in order from outside to inside."""
		return self.get_attribute('layerIdRef')


	@layerIdRef.setter
	def layerIdRef(self,value):
		self.set_attribute('layerIdRef',value)



class Length_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Level_auto():
	"""Building storey Local Placement Z coordinate."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Life_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class LightControlId_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class LightId_auto():
	""""""

	@property
	def lightIdRef(self):
		"""Identifier pointing at a light object"""
		return self.get_attribute('lightIdRef')


	@lightIdRef.setter
	def lightIdRef(self,value):
		self.set_attribute('lightIdRef',value)



class Lighting_auto():
	""""""

	@property
	def lightingSystemIdRef(self):
		return self.get_attribute('lightingSystemIdRef')


	@lightingSystemIdRef.setter
	def lightingSystemIdRef(self,value):
		self.set_attribute('lightingSystemIdRef',value)


	@property
	def lightingControlIdRef(self):
		return self.get_attribute('lightingControlIdRef')


	@lightingControlIdRef.setter
	def lightingControlIdRef(self,value):
		self.set_attribute('lightingControlIdRef',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def CoefficientOfUtilization(self):
		return self.get_child('CoefficientOfUtilization')


	@property
	def CoefficientOfUtilizations(self):
		return self.get_children('CoefficientOfUtilization')


	def add_CoefficientOfUtilization(self,
		wallReflectance=None,
		ceilingCavityReflectance=None,
		floorReflectance=None,
		roomCavityRatio=None,
		):
		return self.add_child('CoefficientOfUtilization',
			wallReflectance=wallReflectance,
			ceilingCavityReflectance=ceilingCavityReflectance,
			floorReflectance=floorReflectance,
			roomCavityRatio=roomCavityRatio,
			)


	@property
	def PhotometryOrientation(self):
		return self.get_child('PhotometryOrientation')


	@property
	def PhotometryOrientations(self):
		return self.get_children('PhotometryOrientation')


	def add_PhotometryOrientation(self,
		):
		return self.add_child('PhotometryOrientation',
			)



class LightingControl_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def lightingSystemIdRef(self):
		return self.get_attribute('lightingSystemIdRef')


	@lightingSystemIdRef.setter
	def lightingSystemIdRef(self,value):
		self.set_attribute('lightingSystemIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Illuminance(self):
		return self.get_child('Illuminance')


	@property
	def Illuminances(self):
		return self.get_children('Illuminance')


	def add_Illuminance(self,
		unit=None,
		):
		return self.add_child('Illuminance',
			unit=unit,
			)


	@property
	def CartesianPoint(self):
		return self.get_child('CartesianPoint')


	@property
	def CartesianPoints(self):
		return self.get_children('CartesianPoint')


	def add_CartesianPoint(self,
		):
		return self.add_child('CartesianPoint',
			)


	@property
	def MinPowerFrac(self):
		return self.get_child('MinPowerFrac')


	@property
	def MinPowerFracs(self):
		return self.get_children('MinPowerFrac')


	def add_MinPowerFrac(self,
		):
		return self.add_child('MinPowerFrac',
			)


	@property
	def MinLightFrac(self):
		return self.get_child('MinLightFrac')


	@property
	def MinLightFracs(self):
		return self.get_children('MinLightFrac')


	def add_MinLightFrac(self,
		):
		return self.add_child('MinLightFrac',
			)


	@property
	def PercentAreaDaylitControlled(self):
		return self.get_child('PercentAreaDaylitControlled')


	@property
	def PercentAreaDaylitControlleds(self):
		return self.get_children('PercentAreaDaylitControlled')


	def add_PercentAreaDaylitControlled(self,
		unit=None,
		):
		return self.add_child('PercentAreaDaylitControlled',
			unit=unit,
			)



class LightingSystem_auto():
	""""""

	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def NumberOfLamps(self):
		return self.get_child('NumberOfLamps')


	@property
	def NumberOfLampss(self):
		return self.get_children('NumberOfLamps')


	def add_NumberOfLamps(self,
		):
		return self.add_child('NumberOfLamps',
			)


	@property
	def LumensPerLamp(self):
		return self.get_child('LumensPerLamp')


	@property
	def LumensPerLamps(self):
		return self.get_children('LumensPerLamp')


	def add_LumensPerLamp(self,
		):
		return self.add_child('LumensPerLamp',
			)


	@property
	def Dimensions(self):
		return self.get_child('Dimensions')


	@property
	def Dimensionss(self):
		return self.get_children('Dimensions')


	def add_Dimensions(self,
		):
		return self.add_child('Dimensions',
			)


	@property
	def InputWatts(self):
		return self.get_child('InputWatts')


	@property
	def InputWattss(self):
		return self.get_children('InputWatts')


	def add_InputWatts(self,
		unit=None,
		):
		return self.add_child('InputWatts',
			unit=unit,
			)


	@property
	def Ballast(self):
		return self.get_child('Ballast')


	@property
	def Ballasts(self):
		return self.get_children('Ballast')


	def add_Ballast(self,
		):
		return self.add_child('Ballast',
			)


	@property
	def Lamp(self):
		return self.get_child('Lamp')


	@property
	def Lamps(self):
		return self.get_children('Lamp')


	def add_Lamp(self,
		):
		return self.add_child('Lamp',
			)


	@property
	def Luminaire(self):
		return self.get_child('Luminaire')


	@property
	def Luminaires(self):
		return self.get_children('Luminaire')


	def add_Luminaire(self,
		):
		return self.add_child('Luminaire',
			)


	@property
	def Photometry(self):
		return self.get_child('Photometry')


	@property
	def Photometrys(self):
		return self.get_children('Photometry')


	def add_Photometry(self,
		):
		return self.add_child('Photometry',
			)


	@property
	def CoefficientOfUtilization(self):
		return self.get_child('CoefficientOfUtilization')


	@property
	def CoefficientOfUtilizations(self):
		return self.get_children('CoefficientOfUtilization')


	def add_CoefficientOfUtilization(self,
		wallReflectance=None,
		ceilingCavityReflectance=None,
		floorReflectance=None,
		roomCavityRatio=None,
		):
		return self.add_child('CoefficientOfUtilization',
			wallReflectance=wallReflectance,
			ceilingCavityReflectance=ceilingCavityReflectance,
			floorReflectance=floorReflectance,
			roomCavityRatio=roomCavityRatio,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class LightPowerPerArea_auto():
	"""Amount of power used by lighting in a given area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class LoadCalcInputParameters_auto():
	""""""

	@property
	def RTSParameters(self):
		return self.get_child('RTSParameters')


	@property
	def RTSParameterss(self):
		return self.get_children('RTSParameters')


	def add_RTSParameters(self,
		roofCTSType=None,
		wallCTSType=None,
		):
		return self.add_child('RTSParameters',
			roofCTSType=roofCTSType,
			wallCTSType=wallCTSType,
			)


	@property
	def CLTDParameters(self):
		return self.get_child('CLTDParameters')


	@property
	def CLTDParameterss(self):
		return self.get_children('CLTDParameters')


	def add_CLTDParameters(self,
		roofASHRAENumber=None,
		wallASHRAEGroup=None,
		roofColor=None,
		roofHasSuspendedCeiling=None,
		wallColor=None,
		):
		return self.add_child('CLTDParameters',
			roofASHRAENumber=roofASHRAENumber,
			wallASHRAEGroup=wallASHRAEGroup,
			roofColor=roofColor,
			roofHasSuspendedCeiling=roofHasSuspendedCeiling,
			wallColor=wallColor,
			)


	@property
	def ManualJ8Parameters(self):
		return self.get_child('ManualJ8Parameters')


	@property
	def ManualJ8Parameterss(self):
		return self.get_children('ManualJ8Parameters')


	def add_ManualJ8Parameters(self,
		wallGroupManualJ=None,
		roofCLTDIndex=None,
		floorIsRadiant=None,
		floorCrawlSpaceWallUValue=None,
		floorCrawlSpaceIsSealed=None,
		floorCategory=None,
		):
		return self.add_child('ManualJ8Parameters',
			wallGroupManualJ=wallGroupManualJ,
			roofCLTDIndex=roofCLTDIndex,
			floorIsRadiant=floorIsRadiant,
			floorCrawlSpaceWallUValue=floorCrawlSpaceWallUValue,
			floorCrawlSpaceIsSealed=floorCrawlSpaceIsSealed,
			floorCategory=floorCategory,
			)


	@property
	def FloorSlabHeatLossCoefficient(self):
		return self.get_child('FloorSlabHeatLossCoefficient')


	@property
	def FloorSlabHeatLossCoefficients(self):
		return self.get_children('FloorSlabHeatLossCoefficient')


	def add_FloorSlabHeatLossCoefficient(self,
		floorSlabPerimeterHeatLossCoefficientUnitTypeEnum=None,
		):
		return self.add_child('FloorSlabHeatLossCoefficient',
			floorSlabPerimeterHeatLossCoefficientUnitTypeEnum=floorSlabPerimeterHeatLossCoefficientUnitTypeEnum,
			)



class Location_auto():
	"""The Location element describes the location of the global origin for this campus. This element can be used in a general sense by using the Name and Description elements for a physical address or landmark, or Location can be made precise by specifying the Elevation, Longitude, and Latitude of the origin."""

	@property
	def StationId(self):
		return self.get_child('StationId')


	@property
	def StationIds(self):
		return self.get_children('StationId')


	def add_StationId(self,
		IDType=None,
		):
		return self.add_child('StationId',
			IDType=IDType,
			)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ZipcodeOrPostalCode(self):
		return self.get_child('ZipcodeOrPostalCode')


	@property
	def ZipcodeOrPostalCodes(self):
		return self.get_children('ZipcodeOrPostalCode')


	def add_ZipcodeOrPostalCode(self,
		):
		return self.add_child('ZipcodeOrPostalCode',
			)


	@property
	def Longitude(self):
		return self.get_child('Longitude')


	@property
	def Longitudes(self):
		return self.get_children('Longitude')


	def add_Longitude(self,
		):
		return self.add_child('Longitude',
			)


	@property
	def Latitude(self):
		return self.get_child('Latitude')


	@property
	def Latitudes(self):
		return self.get_children('Latitude')


	def add_Latitude(self,
		):
		return self.add_child('Latitude',
			)


	@property
	def Elevation(self):
		return self.get_child('Elevation')


	@property
	def Elevations(self):
		return self.get_children('Elevation')


	def add_Elevation(self,
		unit=None,
		):
		return self.add_child('Elevation',
			unit=unit,
			)


	@property
	def CADModelAzimuth(self):
		return self.get_child('CADModelAzimuth')


	@property
	def CADModelAzimuths(self):
		return self.get_children('CADModelAzimuth')


	def add_CADModelAzimuth(self,
		):
		return self.add_child('CADModelAzimuth',
			)



class Longitude_auto():
	"""Degrees east of Greenwich, in decimal degrees. Locations west of Greenwich are negative."""


class LowerLimitValue_auto():
	""""""


class LowValue_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class LumensPerLamp_auto():
	""""""


class Luminaire_auto():
	"""Type of luminaire used"""


class ManualJ8Parameters_auto():
	"""Parameters required by the ACCA Manual J Eighth Edition load calculation method. Ignore this element and all elements under it if you are not planning to use that method."""

	@property
	def wallGroupManualJ(self):
		"""Specifies the group code for the wall, which determines how quickly the wall delivers heat into the space. See Table 4C, page T4C-1 ACCA Manual J Eighth Edition."""
		return self.get_attribute('wallGroupManualJ')


	@wallGroupManualJ.setter
	def wallGroupManualJ(self,value):
		self.set_attribute('wallGroupManualJ',value)


	@property
	def roofCLTDIndex(self):
		"""Specifies the array of CLTD values to use for the roof, which determines how quickly the roof delivers heat into the space. See Table 4A page T4A-18 and following, ACCA Manual J Eighth Edition."""
		return self.get_attribute('roofCLTDIndex')


	@roofCLTDIndex.setter
	def roofCLTDIndex(self,value):
		self.set_attribute('roofCLTDIndex',value)


	@property
	def floorIsRadiant(self):
		"""Specifies whether or not to use a higher heating temperature difference value in calculating the heating loss for a floor (25 degrees F higher value is used in formula if floor is radiant). See Figure A5-5, page A5-8, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorIsRadiant')


	@floorIsRadiant.setter
	def floorIsRadiant(self,value):
		self.set_attribute('floorIsRadiant',value)


	@property
	def floorCrawlSpaceWallUValue(self):
		"""Specifies the u-value of the crawl space wall that is associated with the floor, which affects both the heating and cooling load. See Figure A5-5, page A5-8, and Figure A5-17, page A5-16, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorCrawlSpaceWallUValue')


	@floorCrawlSpaceWallUValue.setter
	def floorCrawlSpaceWallUValue(self,value):
		self.set_attribute('floorCrawlSpaceWallUValue',value)


	@property
	def floorCrawlSpaceIsSealed(self):
		"""Specifies whether or not the crawl space wall associated with this floor is well sealed from the outdoor air, which affects both the heating and cooling loads. See Figure A5-5, page A5-8, and Figure A5-17 page A5-16, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorCrawlSpaceIsSealed')


	@floorCrawlSpaceIsSealed.setter
	def floorCrawlSpaceIsSealed(self,value):
		self.set_attribute('floorCrawlSpaceIsSealed',value)


	@property
	def floorCategory(self):
		"""Specifies the type of floor being considered, which affects both the heating and the cooling loads. See Table 4A, pages T4A-27 and following, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorCategory')


	@floorCategory.setter
	def floorCategory(self,value):
		self.set_attribute('floorCategory',value)



class Manufacturer_auto():
	""""""


class Material_auto():
	""""""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Absorptance(self):
		return self.get_child('Absorptance')


	@property
	def Absorptances(self):
		return self.get_children('Absorptance')


	def add_Absorptance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Absorptance',
			unit=unit,
			type=type,
			)


	@property
	def Roughness(self):
		return self.get_child('Roughness')


	@property
	def Roughnesss(self):
		return self.get_children('Roughness')


	def add_Roughness(self,
		value=None,
		):
		return self.add_child('Roughness',
			value=value,
			)


	@property
	def Albedo(self):
		return self.get_child('Albedo')


	@property
	def Albedos(self):
		return self.get_children('Albedo')


	def add_Albedo(self,
		unit=None,
		):
		return self.add_child('Albedo',
			unit=unit,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def ImageTexture(self):
		return self.get_child('ImageTexture')


	@property
	def ImageTextures(self):
		return self.get_children('ImageTexture')


	def add_ImageTexture(self,
		url=None,
		repeatS=None,
		repeatT=None,
		):
		return self.add_child('ImageTexture',
			url=url,
			repeatS=repeatS,
			repeatT=repeatT,
			)


	@property
	def R_value(self):
		return self.get_child('R-value')


	@property
	def R_values(self):
		return self.get_children('R-value')


	def add_R_value(self,
		unit=None,
		):
		return self.add_child('R-value',
			unit=unit,
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def Density(self):
		return self.get_child('Density')


	@property
	def Densitys(self):
		return self.get_children('Density')


	def add_Density(self,
		unit=None,
		):
		return self.add_child('Density',
			unit=unit,
			)


	@property
	def SpecificHeat(self):
		return self.get_child('SpecificHeat')


	@property
	def SpecificHeats(self):
		return self.get_children('SpecificHeat')


	def add_SpecificHeat(self,
		unit=None,
		):
		return self.add_child('SpecificHeat',
			unit=unit,
			)


	@property
	def Permeance(self):
		return self.get_child('Permeance')


	@property
	def Permeances(self):
		return self.get_children('Permeance')


	def add_Permeance(self,
		unit=None,
		):
		return self.add_child('Permeance',
			unit=unit,
			)


	@property
	def Porosity(self):
		return self.get_child('Porosity')


	@property
	def Porositys(self):
		return self.get_children('Porosity')


	def add_Porosity(self,
		unit=None,
		):
		return self.add_child('Porosity',
			unit=unit,
			)


	@property
	def RecycledContent(self):
		return self.get_child('RecycledContent')


	@property
	def RecycledContents(self):
		return self.get_children('RecycledContent')


	def add_RecycledContent(self,
		unit=None,
		):
		return self.add_child('RecycledContent',
			unit=unit,
			)


	@property
	def Fire(self):
		return self.get_child('Fire')


	@property
	def Fires(self):
		return self.get_children('Fire')


	def add_Fire(self,
		):
		return self.add_child('Fire',
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def CADMaterialId(self):
		return self.get_child('CADMaterialId')


	@property
	def CADMaterialIds(self):
		return self.get_children('CADMaterialId')


	def add_CADMaterialId(self,
		CADMaterialIdRef=None,
		):
		return self.add_child('CADMaterialId',
			CADMaterialIdRef=CADMaterialIdRef,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class MaterialId_auto():
	""""""

	@property
	def materialIdRef(self):
		"""ID identifying a material in a Layer element."""
		return self.get_attribute('materialIdRef')


	@materialIdRef.setter
	def materialIdRef(self,value):
		self.set_attribute('materialIdRef',value)


	@property
	def percentOfLayer(self):
		"""Percentage (1-100%) of this layer that this material is made from. """
		return self.get_attribute('percentOfLayer')


	@percentOfLayer.setter
	def percentOfLayer(self,value):
		self.set_attribute('percentOfLayer',value)



class MaxOAFlowPerZone_auto():
	"""Maximum outdoor air flow per zone"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class MaxPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaxRelativeHumidity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaxTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaximumFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaximumFlowFractionDuringReheat_auto():
	""""""


class MeetingDuration_auto():
	"""Potential duration of a meeting"""


class MinNumOccupantsPerMeeting_auto():
	"""The minimum number of occupants per meeting. Uniform distribution is applied."""


class MaxNumOccupantsPerMeeting_auto():
	"""The maximum number of occupants per meeting. Uniform distribution is applied."""


class MinNumberOfMeetingsPerDay_auto():
	"""The minimum number of meetings per day. Uniform distribution is applied."""


class MaxNumberOfMeetingsPerDay_auto():
	"""The maximum number of meetings per day. Uniform distribution is applied."""


class MeetingDurationProbability_auto():
	""""""


class MeetingEvent_auto():
	"""Meeting event occurrence properties"""


class Meter_auto():
	"""Description of a resource measurement"""

	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def UtilityRate(self):
		return self.get_child('UtilityRate')


	@property
	def UtilityRates(self):
		return self.get_children('UtilityRate')


	def add_UtilityRate(self,
		):
		return self.add_child('UtilityRate',
			)



class MeterId_auto():
	""""""

	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class MiddleName_auto():
	""""""


class MinFlow_auto():
	"""Minimum flow"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class MinimumFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinLightFrac_auto():
	"""Fraction of light illuminance used at minimum setting."""


class MinOAFlowPerZone_auto():
	"""Minimum outdoor air flow per zone"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class MinimumOutdoorAirControlType_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinRelativeHumidity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinPowerFrac_auto():
	"""Fraction of power used at minimum setting."""


class MinPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Model_auto():
	""""""


class ModifiedBy_auto():
	"""Denotes the time this file has been modified, as well as the person and program used to modify this file."""

	@property
	def personId(self):
		return self.get_attribute('personId')


	@personId.setter
	def personId(self,value):
		self.set_attribute('personId',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def date(self):
		return self.get_attribute('date')


	@date.setter
	def date(self,value):
		self.set_attribute('date',value)



class MotorInAirstream_auto():
	"""Indicates if the motor is located in the path of the air stream."""


class Name_auto():
	""""""


class NaturalVentHiTemp_auto():
	"""Natural ventilation does not occur above this temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class NaturalVentLoTemp_auto():
	"""Natural ventilation does not occur below this temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class NaturalVentOccDep_auto():
	"""Occupancy dependence of natural ventilation. If true, then natural ventilation only occurs when people are present."""


class TemperatureProbabilityModel_auto():
	""""""


class CoolingTemperature_auto():
	"""A distribution of comfort cooling temperature can be given where occupants and therefore, they don't carry out any actions.  """

	@property
	def TemperatureProbabilityModel(self):
		return self.get_child('TemperatureProbabilityModel')


	@property
	def TemperatureProbabilityModels(self):
		return self.get_children('TemperatureProbabilityModel')


	def add_TemperatureProbabilityModel(self,
		):
		return self.add_child('TemperatureProbabilityModel',
			)



class HeatingTemperature_auto():
	"""A distribution of comfort heating temperature can be given where occupants and therefore, they don't carry out any actions.  """

	@property
	def TemperatureProbabilityModel(self):
		return self.get_child('TemperatureProbabilityModel')


	@property
	def TemperatureProbabilityModels(self):
		return self.get_children('TemperatureProbabilityModel')


	def add_TemperatureProbabilityModel(self,
		):
		return self.add_child('TemperatureProbabilityModel',
			)



class ParameterRange_auto():
	""""""


class ASHRAEComfortTemperatures_auto():
	"""A distribution of comfort cooling and heating temperatures can be given where occupants and therefore, they don't carry out any actions.  """

	@property
	def CoolingTemperature(self):
		return self.get_child('CoolingTemperature')


	@property
	def CoolingTemperatures(self):
		return self.get_children('CoolingTemperature')


	def add_CoolingTemperature(self,
		):
		return self.add_child('CoolingTemperature',
			)


	@property
	def HeatingTemperature(self):
		return self.get_child('HeatingTemperature')


	@property
	def HeatingTemperatures(self):
		return self.get_children('HeatingTemperature')


	def add_HeatingTemperature(self,
		):
		return self.add_child('HeatingTemperature',
			)



class ASHRAEComfortEnvelope_auto():
	"""Range of indoor air temperatures can be given where occupants do not feel thermal discomfort and therefore, they don't carry out any actions.  """


class ASHRAECoolingAdaptiveComfort_auto():
	"""Range of indoor air temperatures can be given where occupants do not feel thermal discomfort and therefore, they don't carry out any actions.  """


class Thermal_auto():
	""""""

	@property
	def ASHRAEComfortTemperatures(self):
		return self.get_child('ASHRAEComfortTemperatures')


	@property
	def ASHRAEComfortTemperaturess(self):
		return self.get_children('ASHRAEComfortTemperatures')


	def add_ASHRAEComfortTemperatures(self,
		):
		return self.add_child('ASHRAEComfortTemperatures',
			)


	@property
	def ASHRAEComfortEnvelope(self):
		return self.get_child('ASHRAEComfortEnvelope')


	@property
	def ASHRAEComfortEnvelopes(self):
		return self.get_children('ASHRAEComfortEnvelope')


	def add_ASHRAEComfortEnvelope(self,
		):
		return self.add_child('ASHRAEComfortEnvelope',
			)


	@property
	def ASHRAECoolingAdaptiveComfort(self):
		return self.get_child('ASHRAECoolingAdaptiveComfort')


	@property
	def ASHRAECoolingAdaptiveComforts(self):
		return self.get_children('ASHRAECoolingAdaptiveComfort')


	def add_ASHRAECoolingAdaptiveComfort(self,
		):
		return self.add_child('ASHRAECoolingAdaptiveComfort',
			)



class Visual_auto():
	""""""


class IAQ_auto():
	""""""


class Physical_auto():
	""""""


class Needs_auto():
	""""""


class NightCycleControl_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class NumberOfLamps_auto():
	""""""


class OAFlowPerArea_auto():
	"""Outside air flow per area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class OAFlowPerPerson_auto():
	"""Outside air flow per person"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class OAFlowPerZone_auto():
	"""Outside air flow per zone"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class ObjectId_auto():
	"""Indicates which object or objects the results apply to, if any"""


class OccupantBehavior_auto():
	"""The occupancy behavior root node"""

	@property
	def ID(self):
		return self.get_attribute('ID')


	@ID.setter
	def ID(self,value):
		self.set_attribute('ID',value)


	@property
	def Version(self):
		return self.get_attribute('Version')


	@Version.setter
	def Version(self,value):
		self.set_attribute('Version',value)


	@property
	def Name(self):
		return self.get_attribute('Name')


	@Name.setter
	def Name(self,value):
		self.set_attribute('Name',value)


	@property
	def IfcProjectGuid(self):
		return self.get_attribute('IfcProjectGuid')


	@IfcProjectGuid.setter
	def IfcProjectGuid(self,value):
		self.set_attribute('IfcProjectGuid',value)


	@property
	def IfcFilename(self):
		return self.get_attribute('IfcFilename')


	@IfcFilename.setter
	def IfcFilename(self,value):
		self.set_attribute('IfcFilename',value)


	@property
	def IfcOriginatingSystem(self):
		return self.get_attribute('IfcOriginatingSystem')


	@IfcOriginatingSystem.setter
	def IfcOriginatingSystem(self,value):
		self.set_attribute('IfcOriginatingSystem',value)


	@property
	def IfcCreationDate(self):
		return self.get_attribute('IfcCreationDate')


	@IfcCreationDate.setter
	def IfcCreationDate(self,value):
		self.set_attribute('IfcCreationDate',value)


	@property
	def IfcAuthor(self):
		return self.get_attribute('IfcAuthor')


	@IfcAuthor.setter
	def IfcAuthor(self,value):
		self.set_attribute('IfcAuthor',value)



class Priority_auto():
	""""""


class MovementBehaviorID_auto():
	""""""


class BehaviorID_auto():
	"""A specific behavior can be assigned to each occupant."""


class Gender_auto():
	""""""


class LifeStyle_auto():
	""""""


class JobType_auto():
	""""""


class MaritalStatus_auto():
	""""""


class Education_auto():
	""""""


class IncomeGroup_auto():
	""""""


class Employment_auto():
	""""""


class ClimateZone_auto():
	""""""


class CommuteMode_auto():
	""""""


class Policy_auto():
	""""""


class Infrastructure_auto():
	""""""


class SocioEconomic_auto():
	"""A specific location can be assigned to each occupant."""


class GeographicLocation_auto():
	"""A specific location can be assigned to each occupant."""


class PastExperience_auto():
	""""""


class CostConscious_auto():
	""""""


class EnvironmentAwareness_auto():
	""""""


class TechnologyOriented_auto():
	""""""


class Accommodating_auto():
	""""""


class SocialInfluence_auto():
	""""""


class SubjectiveValues_auto():
	"""A specific belief can be assigned to each occupant."""


class Occupant_auto():
	"""Attributes to an occupant can be given."""

	@property
	def ID(self):
		return self.get_attribute('ID')


	@ID.setter
	def ID(self,value):
		self.set_attribute('ID',value)


	@property
	def Name(self):
		return self.get_attribute('Name')


	@Name.setter
	def Name(self,value):
		self.set_attribute('Name',value)


	@property
	def IfcGuid(self):
		return self.get_attribute('IfcGuid')


	@IfcGuid.setter
	def IfcGuid(self,value):
		self.set_attribute('IfcGuid',value)



class Occupants_auto():
	""""""


class Opening_auto():
	""""""

	@property
	def coordinatesAbsolute(self):
		"""coordinatesAbsolute is a boolean value for an Opening element, which if true, specifies that the coordinates in RectangularGeometry and PlanarGeometry are relative to the origin of the project's global reference frame.  If this attribute is set to false, this means the coordinates in in RectangularGeometry and PlanarGeometry are relative to a local origin, defined as the lower left hand corner of its parent wall (when viewing the wall looking towards it outward-facing normal (i.e. - "outside looking in"))."""
		return self.get_attribute('coordinatesAbsolute')


	@coordinatesAbsolute.setter
	def coordinatesAbsolute(self,value):
		self.set_attribute('coordinatesAbsolute',value)


	@property
	def interiorShadeType(self):
		return self.get_attribute('interiorShadeType')


	@interiorShadeType.setter
	def interiorShadeType(self,value):
		self.set_attribute('interiorShadeType',value)


	@property
	def exteriorShadeType(self):
		return self.get_attribute('exteriorShadeType')


	@exteriorShadeType.setter
	def exteriorShadeType(self,value):
		self.set_attribute('exteriorShadeType',value)


	@property
	def windowTypeIdRef(self):
		return self.get_attribute('windowTypeIdRef')


	@windowTypeIdRef.setter
	def windowTypeIdRef(self,value):
		self.set_attribute('windowTypeIdRef',value)


	@property
	def constructionIdRef(self):
		"""Identifier pointing to a construction"""
		return self.get_attribute('constructionIdRef')


	@constructionIdRef.setter
	def constructionIdRef(self,value):
		self.set_attribute('constructionIdRef',value)


	@property
	def openingType(self):
		return self.get_attribute('openingType')


	@openingType.setter
	def openingType(self,value):
		self.set_attribute('openingType',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ShadeControl(self):
		return self.get_child('ShadeControl')


	@property
	def ShadeControls(self):
		return self.get_children('ShadeControl')


	def add_ShadeControl(self,
		type=None,
		programId=None,
		):
		return self.add_child('ShadeControl',
			type=type,
			programId=programId,
			)


	@property
	def U_value(self):
		return self.get_child('U-value')


	@property
	def U_values(self):
		return self.get_children('U-value')


	def add_U_value(self,
		unit=None,
		):
		return self.add_child('U-value',
			unit=unit,
			)


	@property
	def ShadingCoeff(self):
		return self.get_child('ShadingCoeff')


	@property
	def ShadingCoeffs(self):
		return self.get_children('ShadingCoeff')


	def add_ShadingCoeff(self,
		unit=None,
		):
		return self.add_child('ShadingCoeff',
			unit=unit,
			)


	@property
	def SolarHeatGainCoeff(self):
		return self.get_child('SolarHeatGainCoeff')


	@property
	def SolarHeatGainCoeffs(self):
		return self.get_children('SolarHeatGainCoeff')


	def add_SolarHeatGainCoeff(self,
		unit=None,
		solarIncidentAngle=None,
		):
		return self.add_child('SolarHeatGainCoeff',
			unit=unit,
			solarIncidentAngle=solarIncidentAngle,
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def GlazeConductivity(self):
		return self.get_child('GlazeConductivity')


	@property
	def GlazeConductivitys(self):
		return self.get_children('GlazeConductivity')


	def add_GlazeConductivity(self,
		unit=None,
		):
		return self.add_child('GlazeConductivity',
			unit=unit,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		surfaceType=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			surfaceType=surfaceType,
			)


	@property
	def Setback(self):
		return self.get_child('Setback')


	@property
	def Setbacks(self):
		return self.get_children('Setback')


	def add_Setback(self,
		unit=None,
		):
		return self.add_child('Setback',
			unit=unit,
			)


	@property
	def NaturalVentHiTemp(self):
		return self.get_child('NaturalVentHiTemp')


	@property
	def NaturalVentHiTemps(self):
		return self.get_children('NaturalVentHiTemp')


	def add_NaturalVentHiTemp(self,
		unit=None,
		):
		return self.add_child('NaturalVentHiTemp',
			unit=unit,
			)


	@property
	def NaturalVentLoTemp(self):
		return self.get_child('NaturalVentLoTemp')


	@property
	def NaturalVentLoTemps(self):
		return self.get_children('NaturalVentLoTemp')


	def add_NaturalVentLoTemp(self,
		unit=None,
		):
		return self.add_child('NaturalVentLoTemp',
			unit=unit,
			)


	@property
	def NaturalVentOccDep(self):
		return self.get_child('NaturalVentOccDep')


	@property
	def NaturalVentOccDeps(self):
		return self.get_children('NaturalVentOccDep')


	def add_NaturalVentOccDep(self,
		):
		return self.add_child('NaturalVentOccDep',
			)


	@property
	def RectangularGeometry(self):
		return self.get_child('RectangularGeometry')


	@property
	def RectangularGeometrys(self):
		return self.get_children('RectangularGeometry')


	def add_RectangularGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('RectangularGeometry',
			id=id,
			unit=unit,
			)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class OperationSchedule_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""Schedule of operation for a piece of equipment. For heating and cooling equipment (such as a boiler or chiller) this is the availability schedule, the schedule of temperatures that, when reached, the piece of equipment will be available."""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def OperationRange(self):
		return self.get_child('OperationRange')


	@property
	def OperationRanges(self):
		return self.get_children('OperationRange')


	def add_OperationRange(self,
